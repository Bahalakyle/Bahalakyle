class name sling.js.generator.JSGenerator header extends sling.common.CodeGenerator public
{
	import jk.log
	import sling.common
	import sling.model
	import sling.util
	import sling.js.model
	import jk.lang
	ctor(ctx as jk.log.LoggingContext, output as sling.common.OutputWriterManager)
	func adjustIndent(n as int)
	func dumpOpeningBrace
	func dumpKeywordParens
	func onFileStarted override
	func dumpComment(node as sling.model.CommentNode, allowExtraNewlines as bool) as bool
	func output(str as string) override
	func tryDumpDataTypeAnnotation(node as sling.common.DataTypeNode)
	func dumpDataType(node as sling.common.DataTypeNode)
	func dumpAnnotationModifier(mod as sling.model.AnnotationModifierNode)
	func isRightToLeftAssociativity(node as sling.model.ExpressionNode) as bool
	func dumpArrayLiteralExpression(node as sling.model.ArrayLiteralExpressionNode)
	func dumpSetLiteralExpression(node as sling.model.SetLiteralExpressionNode)
	func dumpBufferLiteralExpression(node as sling.model.BufferLiteralExpressionNode)
	func dumpObjectLiteralValue(node as sling.common.NodeObject)
	func dumpObjectLiteralExpression(node as sling.js.model.ObjectLiteralExpressionNode)
	func doDumpDestructuredDeclaration(node as sling.js.model.DestructuredVariableDeclarationNode, withTerminator as bool = true)
	func dumpRegularExpressionLiteralExpression(node as sling.js.model.RegularExpressionLiteralExpressionNode)
	func dumpLiteralExpression(node as sling.model.LiteralExpressionNode)
	func dumpSymbolNode(node as sling.model.SymbolNode, dumpAbsolute as bool = true)
	func dumpSymbolExpression(node as sling.model.SymbolExpressionNode)
	func dumpMemberAccessExpression(node as sling.model.MemberAccessExpressionNode)
	func dumpFunctionCallExpression(node as sling.model.FunctionCallExpressionNode)
	func dumpExpression(node as sling.model.ExpressionNode, parent as sling.model.ExpressionNode)
	func dumpCreateObjectExpression(node as sling.model.CreateObjectExpressionNode)
	func dumpSubScriptExpression(node as sling.model.SubscriptExpressionNode)
	func dumpMembershipCheckExpressionNode(node as sling.model.MembershipCheckExpressionNode)
	func doDumpExpression(node as sling.model.ExpressionNode, parent as sling.model.ExpressionNode)
	func dumpBlockStatement(node as sling.model.BlockNode, hasNewLine as bool = true)
	func dumpEmbededBlock(node as sling.model.EmbedBlockNode)
	func dumpStatementsFrom(node as sling.common.ContainerNode)
	func dumpVariableArgumentsDeclaration(node as sling.model.VariableArgumentsDeclarationNode, withTerminator as bool = true)
	func dumpVariableDeclaration(node as sling.common.NodeObject, withTerminator as bool = true)
	func doDumpMultipleVariableDeclaration(node as sling.model.MultipleVariableDeclarationNode, withTerminator as bool)
	func doDumpVariableDeclaration(node as sling.model.VariableDeclarationNode, withTerminator as bool)
	func dumpFunctionDeclarationParameters(node as sling.model.FunctionDeclarationBaseNode)
	func dumpFunctionDeclarationParameter(node as sling.common.NodeObject) as bool
	func dumpArrowFunctionDeclaration(node as sling.model.FunctionDeclarationNode)
	func dumpBaseTypes(node as sling.model.EntityDeclarationNode)
	func doDumpBaseType(basetypes as vector<sling.model.BaseTypeNode>, type as string)
	func dumpFunctionDeclaration(node as sling.model.FunctionDeclarationNode, isExpression as bool, isMethod as bool)
	func dumpPropertyFunctionDeclaration(node as sling.js.model.PropertyFunctionDeclarationNode)
	func dumpInterfaceDeclaration(node as sling.model.InterfaceDeclarationNode)
	func dumpTypeAliasDeclaration(node as sling.model.TypeAliasDeclarationNode)
	func dumpConstructorDeclaration(node as sling.model.ConstructorDeclarationNode)
	func dumpClassDeclaration(node as sling.model.ClassDeclarationNode)
	func dumpGenericTypes(genericTypes as vector)
	func dumpIfStatement(node as sling.model.IfStatementNode)
	func dumpDoWhileStatement(node as sling.model.DoWhileStatementNode)
	func dumpWhileStatement(node as sling.model.WhileStatementNode)
	func dumpForStatement(node as sling.model.ForStatementNode)
	func dumpSwitchStatement(node as sling.model.SwitchStatementNode)
	func dumpTryCatchStatement(node as sling.model.TryCatchStatementNode)
	func dumpWithStatement(node as sling.model.WithStatementNode)
	func dumpImportStatement(node as sling.model.ImportStatementNode)
	func dumpEnumDeclaration(node as sling.model.EnumDeclarationNode)
	func dumpPropertyVariableDeclaration(node as sling.model.VariableDeclarationNode)
	func dumpExportStatement(node as sling.js.model.ExportStatementNode)
	func dumpStatements(node as sling.common.ContainerNode, includeModuleMembers as bool)
	func dumpStatement(node as sling.common.NodeObject, includeModuleMembers as bool = false)
	func dumpNamespace(namespace as sling.model.NamespaceNode)
	func dumpModifiers(node as sling.common.NodeObject)
	func dumpModifier(mod as string, node as sling.common.NodeObject)
	func dumpModule(module as sling.common.CodeUnitNode) override
	func dumpFile(file as sling.common.CodeFileNode) override
	func getExcludeComments as bool #getterMethod
	func setExcludeComments(v as bool) as sling.js.generator.JSGenerator #setterMethod
	func getCurrentIndent as int #getterMethod
	func setCurrentIndent(v as int) as sling.js.generator.JSGenerator #setterMethod
	func getCopyrightDeclaration as string #getterMethod
	func setCopyrightDeclaration(v as string) as sling.js.generator.JSGenerator #setterMethod
	func getHangingBraces as bool #getterMethod
	func setHangingBraces(v as bool) as sling.js.generator.JSGenerator #setterMethod
	func getInsertSpaceAfterKeywords as bool #getterMethod
	func setInsertSpaceAfterKeywords(v as bool) as sling.js.generator.JSGenerator #setterMethod
	func getSupportTypeScript as bool #getterMethod
	func setSupportTypeScript(v as bool) as sling.js.generator.JSGenerator #setterMethod
	func getReadableCode as bool #getterMethod
	func setReadableCode(v as bool) as sling.js.generator.JSGenerator #setterMethod
	func getEnableClassEmbedBlock as bool #getterMethod
	func setEnableClassEmbedBlock(v as bool) as sling.js.generator.JSGenerator #setterMethod
}
