class name jk.socket.ssl.SSLSocketForSushi header extends jk.socket.ssl.SSLSocket public
{
	import jk.log
	import jk.fs
	import jk.lang
	ctor
	func setAcceptInvalidCertificate(v as bool) override
	func setRequireClientCertificate(v as bool) override
	func open(cSocket as jk.socket.ConnectedSocket, certFile as jk.fs.File = null, keyFile as jk.fs.File = null, isServer as bool = false, passphrase as string = null) as bool
	func read(buffer as buffer) override as int
	func close override
	func readWithTimeout(buffer as buffer, timeout as int) override as int
	func write(buffer as buffer, size as int) override as int
	func getSocket override as jk.socket.ConnectedSocket
	func getCtx as jk.log.LoggingContext #getterMethod
	func setCtx(v as jk.log.LoggingContext) as jk.socket.ssl.SSLSocketForSushi #setterMethod
	func setSocket(v as jk.socket.TCPSocketForSushi) as jk.socket.ssl.SSLSocketForSushi #setterMethod
	func getServerAddress as string #getterMethod
	func setServerAddress(v as string) as jk.socket.ssl.SSLSocketForSushi #setterMethod
}
class name jk.socket.ssl.SSLSocket header implements jk.socket.ConnectedSocket abstract public
{
	import jk.socket
	import jk.log
	import jk.fs
	import jk.lang
	ctor
	func createInstance(cSocket as jk.socket.ConnectedSocket, serverAddress as string = null, ctx as jk.log.LoggingContext = null, certFile as jk.fs.File = null, keyFile as jk.fs.File = null, isServer as bool = false, acceptInvalidCertificate as bool = false, passphrase as string = null) static as jk.socket.ssl.SSLSocket
	func forClient(cSocket as jk.socket.ConnectedSocket, hostAddress as string, ctx as jk.log.LoggingContext = null, acceptInvalidCertificate as bool = false, passphrase as string = null) static as jk.socket.ssl.SSLSocket
	func forServer(cSocket as jk.socket.ConnectedSocket, certFile as jk.fs.File = null, keyFile as jk.fs.File = null, ctx as jk.log.LoggingContext = null, acceptInvalidCertificate as bool = false, passphrase as string = null) static as jk.socket.ssl.SSLSocket
	func setAcceptInvalidCertificate(accept as bool) abstract
	func setRequireClientCertificate(require as bool) abstract
	func close abstract
	func read(buffer as buffer) abstract as int
	func readWithTimeout(buffer as buffer, timeout as int) abstract as int
	func write(buffer as buffer, size as int) abstract as int
	func getSocket abstract as jk.socket.ConnectedSocket
}
