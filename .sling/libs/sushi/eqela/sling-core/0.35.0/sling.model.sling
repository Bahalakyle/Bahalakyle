class name sling.model.CaseBlockNode header extends sling.common.NodeObject public
{
	import sling.common
	import jk.lang
	ctor
	func getNodeTypeName override as string
	func createNew override as sling.common.NodeObject
	func copyTo(o as sling.common.NodeObject) override as bool
	func replaceChild(oldnode as sling.common.NodeObject, newnode as sling.common.NodeObject, doExport as bool) override as bool
	func acceptVisitor(visitor as sling.common.NodeVisitor) override as bool
	func destroy override
	func setBlock(v as sling.model.BlockNode, doExport as bool = false)
	func getBlock as sling.model.BlockNode
	func exportBlock as sling.model.BlockNode
	func setIsRaw(v as bool)
	func getIsRaw as bool
}
class name sling.model.StringEqualsExpressionNode header extends sling.model.ComparisonExpressionNode public
{
	import sling.common
	import jk.lang
	ctor
	func instance(left as sling.model.ExpressionNode, right as sling.model.ExpressionNode) static as sling.model.StringEqualsExpressionNode
	func getNodeTypeName override as string
	func createNew override as sling.common.NodeObject
	func copyTo(o as sling.common.NodeObject) override as bool
	func replaceChild(oldnode as sling.common.NodeObject, newnode as sling.common.NodeObject, doExport as bool) override as bool
	func acceptVisitor(visitor as sling.common.NodeVisitor) override as bool
	func destroy override
}
class name sling.model.StyleSheetExpressionNode header extends sling.model.ExpressionNode public
{
	import sling.common
	import jk.lang
	ctor
	func getNodeTypeName override as string
	func createNew override as sling.common.NodeObject
	func copyTo(o as sling.common.NodeObject) override as bool
	func replaceChild(oldnode as sling.common.NodeObject, newnode as sling.common.NodeObject, doExport as bool) override as bool
	func acceptVisitor(visitor as sling.common.NodeVisitor) override as bool
	func destroy override
	func setBody(v as sling.model.BlockNode, doExport as bool = false)
	func getBody as sling.model.BlockNode
	func exportBody as sling.model.BlockNode
}
class name sling.model.CreateObjectExpressionNode header extends sling.model.ExpressionNode public
{
	import sling.common
	import jk.lang
	ctor
	func forType(type as sling.common.DataTypeNode) static as sling.model.CreateObjectExpressionNode
	func forReferenceTypeName(type as string) static as sling.model.CreateObjectExpressionNode
	func getNodeTypeName override as string
	func createNew override as sling.common.NodeObject
	func copyTo(o as sling.common.NodeObject) override as bool
	func replaceChild(oldnode as sling.common.NodeObject, newnode as sling.common.NodeObject, doExport as bool) override as bool
	func acceptVisitor(visitor as sling.common.NodeVisitor) override as bool
	func destroy override
	func setType(v as sling.common.DataTypeNode, doExport as bool = false)
	func getType as sling.common.DataTypeNode
	func exportType as sling.common.DataTypeNode
	func setTypeExpression(v as sling.model.ExpressionNode, doExport as bool = false)
	func getTypeExpression as sling.model.ExpressionNode
	func exportTypeExpression as sling.model.ExpressionNode
	func setParameters(v as vector, doExport as bool = false)
	func getParameters as vector
	func exportParameters as vector
	func addToParameters(v as sling.model.ExpressionNode)
	func clearParameters
	func setInitializers(v as vector, doExport as bool = false)
	func getInitializers as vector
	func exportInitializers as vector
	func addToInitializers(v as sling.model.ExpressionNode)
	func clearInitializers
}
class name sling.model.TryCatchStatementNode header extends sling.common.NodeObject public
{
	import sling.common
	import jk.lang
	ctor
	func forTryBlock(tryBlock as sling.model.BlockNode) static as sling.model.TryCatchStatementNode
	func addToInitializer(node as sling.common.NodeObject) as sling.model.TryCatchStatementNode
	func getNodeTypeName override as string
	func createNew override as sling.common.NodeObject
	func copyTo(o as sling.common.NodeObject) override as bool
	func replaceChild(oldnode as sling.common.NodeObject, newnode as sling.common.NodeObject, doExport as bool) override as bool
	func acceptVisitor(visitor as sling.common.NodeVisitor) override as bool
	func destroy override
	func setInitializer(v as sling.model.FlatBlockNode, doExport as bool = false)
	func getInitializer as sling.model.FlatBlockNode
	func exportInitializer as sling.model.FlatBlockNode
	func setTryBlock(v as sling.model.BlockNode, doExport as bool = false)
	func getTryBlock as sling.model.BlockNode
	func exportTryBlock as sling.model.BlockNode
	func setFinallyBlock(v as sling.model.BlockNode, doExport as bool = false)
	func getFinallyBlock as sling.model.BlockNode
	func exportFinallyBlock as sling.model.BlockNode
	func setElseBlock(v as sling.model.BlockNode, doExport as bool = false)
	func getElseBlock as sling.model.BlockNode
	func exportElseBlock as sling.model.BlockNode
	func setCatchBlocks(v as vector, doExport as bool = false)
	func getCatchBlocks as vector
	func exportCatchBlocks as vector
	func addToCatchBlocks(v as sling.model.CatchBlockNode)
	func clearCatchBlocks
}
class name sling.model.FileSystemReferenceExpressionNode header extends sling.model.ExpressionNode abstract public
{
	import jk.fs
	import sling.common
	import jk.lang
	ctor
	func getNodeTypeName override as string
	func copyTo(o as sling.common.NodeObject) override as bool
	func replaceChild(oldnode as sling.common.NodeObject, newnode as sling.common.NodeObject, doExport as bool) override as bool
	func acceptVisitor(visitor as sling.common.NodeVisitor) override as bool
	func destroy override
	func setName(v as string)
	func getName as string
	func setRelativeTo(v as jk.fs.File)
	func getRelativeTo as jk.fs.File
}
class name sling.model.BreakStatementNode header extends sling.common.NodeObject public
{
	import sling.common
	import jk.lang
	ctor
	func getNodeTypeName override as string
	func createNew override as sling.common.NodeObject
	func copyTo(o as sling.common.NodeObject) override as bool
	func replaceChild(oldnode as sling.common.NodeObject, newnode as sling.common.NodeObject, doExport as bool) override as bool
	func acceptVisitor(visitor as sling.common.NodeVisitor) override as bool
	func destroy override
}
class name sling.model.FunctionDeclarationBaseNode header extends sling.model.NodeObjectWithModifiers abstract public
{
	import sling.common
	import jk.lang
	ctor
	func getCreateBody as sling.model.BlockNode
	func prependParameter(param as sling.common.NodeObject)
	func getParameterCount as int
	func removeFirstParameter as sling.common.NodeObject
	func getParameter(n as int) as sling.common.NodeObject
	func getNodeTypeName override as string
	func copyTo(o as sling.common.NodeObject) override as bool
	func replaceChild(oldnode as sling.common.NodeObject, newnode as sling.common.NodeObject, doExport as bool) override as bool
	func acceptVisitor(visitor as sling.common.NodeVisitor) override as bool
	func destroy override
	func setBody(v as sling.model.BlockNode, doExport as bool = false)
	func getBody as sling.model.BlockNode
	func exportBody as sling.model.BlockNode
	func setDescription(v as string)
	func getDescription as string
	func setGenericTypes(v as vector, doExport as bool = false)
	func getGenericTypes as vector
	func exportGenericTypes as vector
	func addToGenericTypes(v as sling.model.TemplateDeclarationNode)
	func clearGenericTypes
	func setParameters(v as vector, doExport as bool = false)
	func getParameters as vector
	func exportParameters as vector
	func addToParameters(v as sling.common.NodeObject)
	func clearParameters
	func setThrowables(v as vector, doExport as bool = false)
	func getThrowables as vector
	func exportThrowables as vector
	func addToThrowables(v as sling.common.DataTypeNode)
	func clearThrowables
}
class name sling.model.AutomaticDataTypeNode header extends sling.common.DataTypeNode public
{
	import sling.common
	import jk.lang
	ctor
	func getNodeTypeName override as string
	func createNew override as sling.common.NodeObject
	func copyTo(o as sling.common.NodeObject) override as bool
	func replaceChild(oldnode as sling.common.NodeObject, newnode as sling.common.NodeObject, doExport as bool) override as bool
	func acceptVisitor(visitor as sling.common.NodeVisitor) override as bool
	func destroy override
}
class name sling.model.GetValueExpressionNode header extends sling.model.ExpressionNode public
{
	import sling.common
	import jk.lang
	ctor
	func getNodeTypeName override as string
	func createNew override as sling.common.NodeObject
	func copyTo(o as sling.common.NodeObject) override as bool
	func replaceChild(oldnode as sling.common.NodeObject, newnode as sling.common.NodeObject, doExport as bool) override as bool
	func acceptVisitor(visitor as sling.common.NodeVisitor) override as bool
	func destroy override
	func setExpression(v as sling.model.ExpressionNode, doExport as bool = false)
	func getExpression as sling.model.ExpressionNode
	func exportExpression as sling.model.ExpressionNode
}
class name sling.model.ModelDeclarationNode header extends sling.model.GenericCapableEntityDeclarationNode public
{
	import sling.common
	import jk.lang
	ctor
	func forName(name as string) static as sling.model.ModelDeclarationNode
	func getNodeTypeName override as string
	func createNew override as sling.common.NodeObject
	func copyTo(o as sling.common.NodeObject) override as bool
	func replaceChild(oldnode as sling.common.NodeObject, newnode as sling.common.NodeObject, doExport as bool) override as bool
	func acceptVisitor(visitor as sling.common.NodeVisitor) override as bool
	func destroy override
}
class name sling.model.CatchBlockNode header extends sling.common.NodeObject public
{
	import sling.common
	import jk.lang
	ctor
	func instance(xc as sling.model.VariableDeclarationNode, nn as sling.model.BlockNode) static as sling.model.CatchBlockNode
	func getNodeTypeName override as string
	func createNew override as sling.common.NodeObject
	func copyTo(o as sling.common.NodeObject) override as bool
	func replaceChild(oldnode as sling.common.NodeObject, newnode as sling.common.NodeObject, doExport as bool) override as bool
	func acceptVisitor(visitor as sling.common.NodeVisitor) override as bool
	func destroy override
	func setBlock(v as sling.model.BlockNode, doExport as bool = false)
	func getBlock as sling.model.BlockNode
	func exportBlock as sling.model.BlockNode
	func setWhen(v as sling.model.ExpressionNode, doExport as bool = false)
	func getWhen as sling.model.ExpressionNode
	func exportWhen as sling.model.ExpressionNode
	func setExceptions(v as vector, doExport as bool = false)
	func getExceptions as vector
	func exportExceptions as vector
	func addToExceptions(v as sling.common.NodeObject)
	func clearExceptions
}
class name sling.model.GetReferenceExpressionNode header extends sling.model.UnaryExpressionNode public
{
	import sling.common
	import jk.lang
	ctor
	func forExpression(expression as sling.model.ExpressionNode) static as sling.model.GetReferenceExpressionNode
	func getNodeTypeName override as string
	func createNew override as sling.common.NodeObject
	func copyTo(o as sling.common.NodeObject) override as bool
	func replaceChild(oldnode as sling.common.NodeObject, newnode as sling.common.NodeObject, doExport as bool) override as bool
	func acceptVisitor(visitor as sling.common.NodeVisitor) override as bool
	func destroy override
}
class name sling.model.CommentNode header extends sling.common.NodeObject public
{
	import sling.common
	import jk.lang
	ctor
	func forText(text as string, substantial as bool = false) static as sling.model.CommentNode
	func getNodeTypeName override as string
	func createNew override as sling.common.NodeObject
	func copyTo(o as sling.common.NodeObject) override as bool
	func replaceChild(oldnode as sling.common.NodeObject, newnode as sling.common.NodeObject, doExport as bool) override as bool
	func acceptVisitor(visitor as sling.common.NodeVisitor) override as bool
	func destroy override
	func setText(v as string)
	func getText as string
	func setSubstantial(v as bool)
	func getSubstantial as bool
}
class name sling.model.DateTimeDataTypeNode header extends sling.common.DataTypeNode public
{
	import sling.common
	import jk.lang
	ctor
	func getNodeTypeName override as string
	func createNew override as sling.common.NodeObject
	func copyTo(o as sling.common.NodeObject) override as bool
	func replaceChild(oldnode as sling.common.NodeObject, newnode as sling.common.NodeObject, doExport as bool) override as bool
	func acceptVisitor(visitor as sling.common.NodeVisitor) override as bool
	func destroy override
}
class name sling.model.PropertyWillSetFunctionDeclarationNode header extends sling.model.FunctionDeclarationBaseNode public
{
	import sling.common
	import jk.lang
	ctor
	func setParameter(dt as sling.common.DataTypeNode, name as string)
	func getNodeTypeName override as string
	func createNew override as sling.common.NodeObject
	func copyTo(o as sling.common.NodeObject) override as bool
	func replaceChild(oldnode as sling.common.NodeObject, newnode as sling.common.NodeObject, doExport as bool) override as bool
	func acceptVisitor(visitor as sling.common.NodeVisitor) override as bool
	func destroy override
}
class name sling.model.GetDatatypeTypeinfoExpressionNode header extends sling.model.GetTypeinfoExpressionNode public
{
	import sling.common
	import jk.lang
	func forDatatype(type as sling.common.DataTypeNode) static as sling.model.GetDatatypeTypeinfoExpressionNode
	ctor
	func getNodeTypeName override as string
	func createNew override as sling.common.NodeObject
	func copyTo(o as sling.common.NodeObject) override as bool
	func replaceChild(oldnode as sling.common.NodeObject, newnode as sling.common.NodeObject, doExport as bool) override as bool
	func acceptVisitor(visitor as sling.common.NodeVisitor) override as bool
	func destroy override
	func setType(v as sling.common.DataTypeNode, doExport as bool = false)
	func getType as sling.common.DataTypeNode
	func exportType as sling.common.DataTypeNode
}
class name sling.model.DynamicAndExpressionNode header extends sling.model.BinaryExpressionNode public
{
	import sling.common
	import jk.lang
	ctor
	func instance(left as sling.model.ExpressionNode, right as sling.model.ExpressionNode) static as sling.model.DynamicAndExpressionNode
	func getNodeTypeName override as string
	func createNew override as sling.common.NodeObject
	func copyTo(o as sling.common.NodeObject) override as bool
	func replaceChild(oldnode as sling.common.NodeObject, newnode as sling.common.NodeObject, doExport as bool) override as bool
	func acceptVisitor(visitor as sling.common.NodeVisitor) override as bool
	func destroy override
}
class name sling.model.VariableArgumentsDeclarationNode header extends sling.common.NodeObject public
{
	import sling.common
	import jk.lang
	ctor
	func forDeclaration(decl as sling.model.VariableDeclarationNode) static as sling.model.VariableArgumentsDeclarationNode
	func getType as sling.common.DataTypeNode
	func getNodeTypeName override as string
	func createNew override as sling.common.NodeObject
	func copyTo(o as sling.common.NodeObject) override as bool
	func replaceChild(oldnode as sling.common.NodeObject, newnode as sling.common.NodeObject, doExport as bool) override as bool
	func acceptVisitor(visitor as sling.common.NodeVisitor) override as bool
	func destroy override
	func setVariableDeclaration(v as sling.model.VariableDeclarationNode, doExport as bool = false)
	func getVariableDeclaration as sling.model.VariableDeclarationNode
	func exportVariableDeclaration as sling.model.VariableDeclarationNode
}
class name sling.model.InitializerFunctionDeclarationNode header extends sling.model.FunctionDeclarationBaseNode public
{
	import sling.common
	import jk.lang
	ctor
	func getNodeTypeName override as string
	func createNew override as sling.common.NodeObject
	func copyTo(o as sling.common.NodeObject) override as bool
	func replaceChild(oldnode as sling.common.NodeObject, newnode as sling.common.NodeObject, doExport as bool) override as bool
	func acceptVisitor(visitor as sling.common.NodeVisitor) override as bool
	func destroy override
}
class name sling.model.DoWhileStatementNode header extends sling.common.NodeObject implements sling.model.LoopStatementNode public
{
	import sling.common
	import jk.lang
	ctor
	func instance(condition as sling.model.ExpressionNode, block as sling.model.BlockNode) static as sling.model.DoWhileStatementNode
	func getNodeTypeName override as string
	func createNew override as sling.common.NodeObject
	func copyTo(o as sling.common.NodeObject) override as bool
	func replaceChild(oldnode as sling.common.NodeObject, newnode as sling.common.NodeObject, doExport as bool) override as bool
	func acceptVisitor(visitor as sling.common.NodeVisitor) override as bool
	func destroy override
	func setCondition(v as sling.model.ExpressionNode, doExport as bool = false)
	func getCondition as sling.model.ExpressionNode
	func exportCondition as sling.model.ExpressionNode
	func setBlock(v as sling.model.BlockNode, doExport as bool = false)
	func getBlock as sling.model.BlockNode
	func exportBlock as sling.model.BlockNode
}
class name sling.model.TypeCastExpressionNode header extends sling.model.ExpressionNode abstract public
{
	import sling.common
	import jk.lang
	ctor
	func getNodeTypeName override as string
	func copyTo(o as sling.common.NodeObject) override as bool
	func replaceChild(oldnode as sling.common.NodeObject, newnode as sling.common.NodeObject, doExport as bool) override as bool
	func acceptVisitor(visitor as sling.common.NodeVisitor) override as bool
	func destroy override
	func setExpression(v as sling.model.ExpressionNode, doExport as bool = false)
	func getExpression as sling.model.ExpressionNode
	func exportExpression as sling.model.ExpressionNode
	func setType(v as sling.common.DataTypeNode, doExport as bool = false)
	func getType as sling.common.DataTypeNode
	func exportType as sling.common.DataTypeNode
}
class name sling.model.EventRemoveFunctionDeclarationNode header extends sling.model.FunctionDeclarationBaseNode public
{
	import sling.common
	import jk.lang
	ctor
	func setParameter(dt as sling.common.DataTypeNode, name as string)
	func getNodeTypeName override as string
	func createNew override as sling.common.NodeObject
	func copyTo(o as sling.common.NodeObject) override as bool
	func replaceChild(oldnode as sling.common.NodeObject, newnode as sling.common.NodeObject, doExport as bool) override as bool
	func acceptVisitor(visitor as sling.common.NodeVisitor) override as bool
	func destroy override
}
class name sling.model.DecimalLiteralExpressionNode header extends sling.model.LiteralExpressionNode public
{
	import sling.common
	import jk.lang
	func forValue(value as string) static as sling.model.DecimalLiteralExpressionNode
	ctor
	func getNodeTypeName override as string
	func createNew override as sling.common.NodeObject
	func copyTo(o as sling.common.NodeObject) override as bool
	func replaceChild(oldnode as sling.common.NodeObject, newnode as sling.common.NodeObject, doExport as bool) override as bool
	func acceptVisitor(visitor as sling.common.NodeVisitor) override as bool
	func destroy override
	func setValue(v as string)
	func getValue as string
}
class name sling.model.ImportStatementNode header extends sling.common.NodeObject abstract public
{
	import sling.common
	import jk.lang
	ctor
	func getNodeTypeName override as string
	func copyTo(o as sling.common.NodeObject) override as bool
	func replaceChild(oldnode as sling.common.NodeObject, newnode as sling.common.NodeObject, doExport as bool) override as bool
	func acceptVisitor(visitor as sling.common.NodeVisitor) override as bool
	func destroy override
	func setLocalName(v as string)
	func getLocalName as string
}
class name sling.model.DataTypeDefaultValueExpressionNode header extends sling.model.ExpressionNode public
{
	import sling.common
	import jk.lang
	ctor
	func forType(dt as sling.common.DataTypeNode) static as sling.model.DataTypeDefaultValueExpressionNode
	func getNodeTypeName override as string
	func createNew override as sling.common.NodeObject
	func copyTo(o as sling.common.NodeObject) override as bool
	func replaceChild(oldnode as sling.common.NodeObject, newnode as sling.common.NodeObject, doExport as bool) override as bool
	func acceptVisitor(visitor as sling.common.NodeVisitor) override as bool
	func destroy override
	func setType(v as sling.common.DataTypeNode, doExport as bool = false)
	func getType as sling.common.DataTypeNode
	func exportType as sling.common.DataTypeNode
}
class name sling.model.FileSystemDirectoryReferenceExpressionNode header extends sling.model.FileSystemReferenceExpressionNode public
{
	import sling.common
	import jk.lang
	ctor
	func getNodeTypeName override as string
	func createNew override as sling.common.NodeObject
	func copyTo(o as sling.common.NodeObject) override as bool
	func replaceChild(oldnode as sling.common.NodeObject, newnode as sling.common.NodeObject, doExport as bool) override as bool
	func acceptVisitor(visitor as sling.common.NodeVisitor) override as bool
	func destroy override
}
class name sling.model.StaticCastExpressionNode header extends sling.model.TypeCastExpressionNode public
{
	import sling.common
	import jk.lang
	ctor
	func instance(type as sling.common.DataTypeNode, expression as sling.model.ExpressionNode) static as sling.model.StaticCastExpressionNode
	var TYPE_REFERENCE const public static as int
	var TYPE_PRIMITIVE const public static as int
	func getNodeTypeName override as string
	func createNew override as sling.common.NodeObject
	func copyTo(o as sling.common.NodeObject) override as bool
	func replaceChild(oldnode as sling.common.NodeObject, newnode as sling.common.NodeObject, doExport as bool) override as bool
	func acceptVisitor(visitor as sling.common.NodeVisitor) override as bool
	func destroy override
	func setCastType(v as int)
	func getCastType as int
}
class name sling.model.StringConcatenationExpressionNode header extends sling.model.BinaryExpressionNode public
{
	import sling.common
	import jk.lang
	ctor
	func instance(left as sling.model.ExpressionNode, right as sling.model.ExpressionNode) static as sling.model.StringConcatenationExpressionNode
	func forExpressions(xprs as vector<sling.model.ExpressionNode>) static as sling.model.StringConcatenationExpressionNode
	func getNodeTypeName override as string
	func createNew override as sling.common.NodeObject
	func copyTo(o as sling.common.NodeObject) override as bool
	func replaceChild(oldnode as sling.common.NodeObject, newnode as sling.common.NodeObject, doExport as bool) override as bool
	func acceptVisitor(visitor as sling.common.NodeVisitor) override as bool
	func destroy override
}
class name sling.model.TreeElementNode header extends sling.common.NodeObject public
{
	import sling.common
	import jk.lang
	ctor
	func getNodeTypeName override as string
	func createNew override as sling.common.NodeObject
	func copyTo(o as sling.common.NodeObject) override as bool
	func replaceChild(oldnode as sling.common.NodeObject, newnode as sling.common.NodeObject, doExport as bool) override as bool
	func acceptVisitor(visitor as sling.common.NodeVisitor) override as bool
	func destroy override
	func setName(v as string)
	func getName as string
	func setReference(v as string)
	func getReference as string
	func setAttributes(v as vector, doExport as bool = false)
	func getAttributes as vector
	func exportAttributes as vector
	func addToAttributes(v as sling.model.TreeElementAttributeNode)
	func clearAttributes
	func setChildren(v as vector, doExport as bool = false)
	func getChildren as vector
	func exportChildren as vector
	func addToChildren(v as sling.common.NodeObject)
	func clearChildren
}
class name sling.model.PropertyDidSetFunctionDeclarationNode header extends sling.model.FunctionDeclarationBaseNode public
{
	import sling.common
	import jk.lang
	ctor
	func setParameter(dt as sling.common.DataTypeNode, name as string)
	func getNodeTypeName override as string
	func createNew override as sling.common.NodeObject
	func copyTo(o as sling.common.NodeObject) override as bool
	func replaceChild(oldnode as sling.common.NodeObject, newnode as sling.common.NodeObject, doExport as bool) override as bool
	func acceptVisitor(visitor as sling.common.NodeVisitor) override as bool
	func destroy override
}
class name sling.model.CaseTypePatternBlockNode header extends sling.model.CaseBlockNode public
{
	import sling.common
	import jk.lang
	ctor
	func instance(type as sling.common.DataTypeNode, name as string, bb as sling.model.BlockNode) static as sling.model.CaseTypePatternBlockNode
	func getNodeTypeName override as string
	func createNew override as sling.common.NodeObject
	func copyTo(o as sling.common.NodeObject) override as bool
	func replaceChild(oldnode as sling.common.NodeObject, newnode as sling.common.NodeObject, doExport as bool) override as bool
	func acceptVisitor(visitor as sling.common.NodeVisitor) override as bool
	func destroy override
	func setType(v as sling.common.DataTypeNode, doExport as bool = false)
	func getType as sling.common.DataTypeNode
	func exportType as sling.common.DataTypeNode
	func setName(v as string)
	func getName as string
}
class name sling.model.TreeElementAttributeNode header extends sling.common.NodeObject public
{
	import sling.common
	import jk.lang
	ctor
	func getNodeTypeName override as string
	func createNew override as sling.common.NodeObject
	func copyTo(o as sling.common.NodeObject) override as bool
	func replaceChild(oldnode as sling.common.NodeObject, newnode as sling.common.NodeObject, doExport as bool) override as bool
	func acceptVisitor(visitor as sling.common.NodeVisitor) override as bool
	func destroy override
	func setValue(v as sling.model.ExpressionNode, doExport as bool = false)
	func getValue as sling.model.ExpressionNode
	func exportValue as sling.model.ExpressionNode
	func setName(v as string)
	func getName as string
}
class name sling.model.StaticArrayDataTypeNode header extends sling.model.DataTypeExtenderNode public
{
	import sling.common
	import jk.lang
	ctor
	func forPrimaryType(type as sling.common.DataTypeNode, size as sling.model.ExpressionNode = null) static as sling.model.StaticArrayDataTypeNode
	func getNodeTypeName override as string
	func createNew override as sling.common.NodeObject
	func copyTo(o as sling.common.NodeObject) override as bool
	func replaceChild(oldnode as sling.common.NodeObject, newnode as sling.common.NodeObject, doExport as bool) override as bool
	func acceptVisitor(visitor as sling.common.NodeVisitor) override as bool
	func destroy override
	func setSize(v as sling.model.ExpressionNode, doExport as bool = false)
	func getSize as sling.model.ExpressionNode
	func exportSize as sling.model.ExpressionNode
}
class name sling.model.SubtractionAssignmentExpressionNode header extends sling.model.AssignmentExpressionBaseNode public
{
	import sling.common
	import jk.lang
	ctor
	func instance(left as sling.model.ExpressionNode, right as sling.model.ExpressionNode) static as sling.model.SubtractionAssignmentExpressionNode
	func getNodeTypeName override as string
	func createNew override as sling.common.NodeObject
	func copyTo(o as sling.common.NodeObject) override as bool
	func replaceChild(oldnode as sling.common.NodeObject, newnode as sling.common.NodeObject, doExport as bool) override as bool
	func acceptVisitor(visitor as sling.common.NodeVisitor) override as bool
	func destroy override
}
class name sling.model.SwitchStatementNode header extends sling.common.NodeObject public
{
	import sling.common
	import jk.lang
	ctor
	func forExpression(xp as sling.model.ExpressionNode) static as sling.model.SwitchStatementNode
	func getNodeTypeName override as string
	func createNew override as sling.common.NodeObject
	func copyTo(o as sling.common.NodeObject) override as bool
	func replaceChild(oldnode as sling.common.NodeObject, newnode as sling.common.NodeObject, doExport as bool) override as bool
	func acceptVisitor(visitor as sling.common.NodeVisitor) override as bool
	func destroy override
	func setExpression(v as sling.model.ExpressionNode, doExport as bool = false)
	func getExpression as sling.model.ExpressionNode
	func exportExpression as sling.model.ExpressionNode
	func setBlocks(v as vector, doExport as bool = false)
	func getBlocks as vector
	func exportBlocks as vector
	func addToBlocks(v as sling.common.NodeObject)
	func clearBlocks
}
class name sling.model.ArithmeticExpressionNode header extends sling.model.BinaryExpressionNode public
{
	import sling.common
	import jk.lang
	ctor
	func getNodeTypeName override as string
	func createNew override as sling.common.NodeObject
	func copyTo(o as sling.common.NodeObject) override as bool
	func replaceChild(oldnode as sling.common.NodeObject, newnode as sling.common.NodeObject, doExport as bool) override as bool
	func acceptVisitor(visitor as sling.common.NodeVisitor) override as bool
	func destroy override
}
class name sling.model.VariableDeclarationNode header extends sling.model.NodeObjectWithModifiers implements sling.common.NamedNode public
{
	import sling.common
	import jk.lang
	ctor
	func forAutomatic(name as string, initializer as sling.model.ExpressionNode) static as sling.model.VariableDeclarationNode
	func instance(type as sling.common.DataTypeNode, name as string = null, initializer as sling.model.ExpressionNode = null) static as sling.model.VariableDeclarationNode
	func forInitializer(initializer as sling.model.ExpressionNode) static as sling.model.VariableDeclarationNode
	func forDynamic(name as string) static as sling.model.VariableDeclarationNode
	func forName(name as string) static as sling.model.VariableDeclarationNode
	func forType(type as sling.common.DataTypeNode) static as sling.model.VariableDeclarationNode
	func getNodeName as string
	func renameNode(name as string)
	func setName(name as string)
	func getNodeTypeName override as string
	func createNew override as sling.common.NodeObject
	func copyTo(o as sling.common.NodeObject) override as bool
	func replaceChild(oldnode as sling.common.NodeObject, newnode as sling.common.NodeObject, doExport as bool) override as bool
	func acceptVisitor(visitor as sling.common.NodeVisitor) override as bool
	func destroy override
	func setFundamentalType(v as sling.common.DataTypeNode, doExport as bool = false)
	func getFundamentalType as sling.common.DataTypeNode
	func exportFundamentalType as sling.common.DataTypeNode
	func setType(v as sling.common.DataTypeNode, doExport as bool = false)
	func getType as sling.common.DataTypeNode
	func exportType as sling.common.DataTypeNode
	func setInitializer(v as sling.model.ExpressionNode, doExport as bool = false)
	func getInitializer as sling.model.ExpressionNode
	func exportInitializer as sling.model.ExpressionNode
	func getName as string
	func setParamName(v as string)
	func getParamName as string
	func setDescription(v as string)
	func getDescription as string
}
class name sling.model.RegionDeclarationNode header extends sling.common.NamedContainerNode public
{
	import sling.common
	import jk.lang
	ctor
	func getNodeTypeName override as string
	func createNew override as sling.common.NodeObject
	func copyTo(o as sling.common.NodeObject) override as bool
	func replaceChild(oldnode as sling.common.NodeObject, newnode as sling.common.NodeObject, doExport as bool) override as bool
	func acceptVisitor(visitor as sling.common.NodeVisitor) override as bool
	func destroy override
	func setDescription(v as string)
	func getDescription as string
}
class name sling.model.TypeMap header public
{
	import sling.common
	import jk.lang
	ctor
	func merge(from as sling.model.TypeMap, ato as sling.model.TypeMap) static as sling.model.TypeMap
	func forDynamicMap(v as jk.lang.DynamicMap) static as sling.model.TypeMap
	func asDynamicMap as jk.lang.DynamicMap
	func get(name as string) as sling.common.DataTypeNode
	func dup as sling.model.TypeMap
	func clear
	func copyTo(r as sling.model.TypeMap)
	func copyFrom(r as sling.model.TypeMap)
	func set(name as string, dt as sling.common.DataTypeNode)
	func contains(name as string) as bool
}
class name sling.model.SymbolNameComponentNode header extends sling.common.NodeObject public
{
	import sling.common
	import jk.lang
	ctor
	func forObject(obj as object) static as sling.model.SymbolNameComponentNode
	func forName(name as string) static as sling.model.SymbolNameComponentNode
	func instance(name as string, params as vector) static as sling.model.SymbolNameComponentNode
	func getNodeTypeName override as string
	func createNew override as sling.common.NodeObject
	func copyTo(o as sling.common.NodeObject) override as bool
	func replaceChild(oldnode as sling.common.NodeObject, newnode as sling.common.NodeObject, doExport as bool) override as bool
	func acceptVisitor(visitor as sling.common.NodeVisitor) override as bool
	func destroy override
	func setName(v as string)
	func getName as string
	func setTypeParameters(v as vector, doExport as bool = false)
	func getTypeParameters as vector
	func exportTypeParameters as vector
	func addToTypeParameters(v as sling.common.DataTypeNode)
	func clearTypeParameters
}
class name sling.model.LiteralExpressionNode header extends sling.model.ExpressionNode abstract public
{
	import sling.common
	import jk.lang
	ctor
	func getNodeTypeName override as string
	func copyTo(o as sling.common.NodeObject) override as bool
	func replaceChild(oldnode as sling.common.NodeObject, newnode as sling.common.NodeObject, doExport as bool) override as bool
	func acceptVisitor(visitor as sling.common.NodeVisitor) override as bool
	func destroy override
}
class name sling.model.BaseTypeNode header extends sling.common.NodeObject public
{
	import sling.common
	import jk.lang
	ctor
	var INHERIT_AUTO const public static as int
	var INHERIT_EXTEND const public static as int
	var INHERIT_IMPLEMENT const public static as int
	var INHERIT_INFORMATIVE const public static as int
	var INHERIT_UNKNOWN const public static as int
	func forType(type as sling.model.ReferenceDataTypeNode, inheritType as int = 0) static as sling.model.BaseTypeNode
	func forExpression(expression as sling.model.ExpressionNode, inheritType as int = 0) static as sling.model.BaseTypeNode
	func forExtends(type as sling.model.ReferenceDataTypeNode) static as sling.model.BaseTypeNode
	func forImplements(type as sling.model.ReferenceDataTypeNode) static as sling.model.BaseTypeNode
	func getNodeTypeName override as string
	func createNew override as sling.common.NodeObject
	func copyTo(o as sling.common.NodeObject) override as bool
	func replaceChild(oldnode as sling.common.NodeObject, newnode as sling.common.NodeObject, doExport as bool) override as bool
	func acceptVisitor(visitor as sling.common.NodeVisitor) override as bool
	func destroy override
	func setReferenceType(v as sling.model.ReferenceDataTypeNode, doExport as bool = false)
	func getReferenceType as sling.model.ReferenceDataTypeNode
	func exportReferenceType as sling.model.ReferenceDataTypeNode
	func setExpression(v as sling.model.ExpressionNode, doExport as bool = false)
	func getExpression as sling.model.ExpressionNode
	func exportExpression as sling.model.ExpressionNode
	func setInheritType(v as int)
	func getInheritType as int
}
class name sling.model.StringDataTypeNode header extends sling.common.DataTypeNode public
{
	import sling.common
	import jk.lang
	ctor
	func getNodeTypeName override as string
	func createNew override as sling.common.NodeObject
	func copyTo(o as sling.common.NodeObject) override as bool
	func replaceChild(oldnode as sling.common.NodeObject, newnode as sling.common.NodeObject, doExport as bool) override as bool
	func acceptVisitor(visitor as sling.common.NodeVisitor) override as bool
	func destroy override
	func setFixedLength(v as sling.model.ExpressionNode, doExport as bool = false)
	func getFixedLength as sling.model.ExpressionNode
	func exportFixedLength as sling.model.ExpressionNode
}
class name sling.model.SetDataTypeNode header extends sling.model.DataTypeExtenderNode public
{
	import sling.common
	import jk.lang
	ctor
	func forPrimaryType(type as sling.common.DataTypeNode) static as sling.model.SetDataTypeNode
	func getNodeTypeName override as string
	func createNew override as sling.common.NodeObject
	func copyTo(o as sling.common.NodeObject) override as bool
	func replaceChild(oldnode as sling.common.NodeObject, newnode as sling.common.NodeObject, doExport as bool) override as bool
	func acceptVisitor(visitor as sling.common.NodeVisitor) override as bool
	func destroy override
}
class name sling.model.BitwiseAndAssignmentExpressionNode header extends sling.model.AssignmentExpressionBaseNode public
{
	import sling.common
	import jk.lang
	ctor
	func instance(left as sling.model.ExpressionNode, right as sling.model.ExpressionNode) static as sling.model.BitwiseAndAssignmentExpressionNode
	func getNodeTypeName override as string
	func createNew override as sling.common.NodeObject
	func copyTo(o as sling.common.NodeObject) override as bool
	func replaceChild(oldnode as sling.common.NodeObject, newnode as sling.common.NodeObject, doExport as bool) override as bool
	func acceptVisitor(visitor as sling.common.NodeVisitor) override as bool
	func destroy override
}
class name sling.model.IndexerDeclarationNode header extends sling.model.NodeObjectWithModifiers public
{
	import sling.common
	import jk.lang
	ctor
	func forParameters(params as vector) static as sling.model.IndexerDeclarationNode
	func setSetterAsBlock(block as sling.model.BlockNode, varName as string)
	func setGetterAsBlock(block as sling.model.BlockNode)
	func getNodeTypeName override as string
	func createNew override as sling.common.NodeObject
	func copyTo(o as sling.common.NodeObject) override as bool
	func replaceChild(oldnode as sling.common.NodeObject, newnode as sling.common.NodeObject, doExport as bool) override as bool
	func acceptVisitor(visitor as sling.common.NodeVisitor) override as bool
	func destroy override
	func setType(v as sling.common.DataTypeNode, doExport as bool = false)
	func getType as sling.common.DataTypeNode
	func exportType as sling.common.DataTypeNode
	func setGetter(v as sling.model.FunctionDeclarationNode, doExport as bool = false)
	func getGetter as sling.model.FunctionDeclarationNode
	func exportGetter as sling.model.FunctionDeclarationNode
	func setSetter(v as sling.model.FunctionDeclarationNode, doExport as bool = false)
	func getSetter as sling.model.FunctionDeclarationNode
	func exportSetter as sling.model.FunctionDeclarationNode
	func setDescription(v as string)
	func getDescription as string
	func setParameters(v as vector, doExport as bool = false)
	func getParameters as vector
	func exportParameters as vector
	func addToParameters(v as sling.common.NodeObject)
	func clearParameters
}
class name sling.model.CaseGreaterThanBlockNode header extends sling.model.CaseBlockNode public
{
	import sling.common
	import jk.lang
	ctor
	func instance(xp as sling.model.ExpressionNode, bb as sling.model.BlockNode) static as sling.model.CaseGreaterThanBlockNode
	func getNodeTypeName override as string
	func createNew override as sling.common.NodeObject
	func copyTo(o as sling.common.NodeObject) override as bool
	func replaceChild(oldnode as sling.common.NodeObject, newnode as sling.common.NodeObject, doExport as bool) override as bool
	func acceptVisitor(visitor as sling.common.NodeVisitor) override as bool
	func destroy override
	func setExpression(v as sling.model.ExpressionNode, doExport as bool = false)
	func getExpression as sling.model.ExpressionNode
	func exportExpression as sling.model.ExpressionNode
}
class name sling.model.FloorDivisionExpressionNode header extends sling.model.ArithmeticExpressionNode public
{
	import sling.common
	import jk.lang
	func instance(left as sling.model.ExpressionNode, right as sling.model.ExpressionNode) static as sling.model.FloorDivisionExpressionNode
	ctor
	func getNodeTypeName override as string
	func createNew override as sling.common.NodeObject
	func copyTo(o as sling.common.NodeObject) override as bool
	func replaceChild(oldnode as sling.common.NodeObject, newnode as sling.common.NodeObject, doExport as bool) override as bool
	func acceptVisitor(visitor as sling.common.NodeVisitor) override as bool
	func destroy override
}
class name sling.model.StringConcatenationAssignmentExpressionNode header extends sling.model.AssignmentExpressionBaseNode public
{
	import sling.common
	import jk.lang
	ctor
	func instance(left as sling.model.ExpressionNode, right as sling.model.ExpressionNode) static as sling.model.StringConcatenationAssignmentExpressionNode
	func getNodeTypeName override as string
	func createNew override as sling.common.NodeObject
	func copyTo(o as sling.common.NodeObject) override as bool
	func replaceChild(oldnode as sling.common.NodeObject, newnode as sling.common.NodeObject, doExport as bool) override as bool
	func acceptVisitor(visitor as sling.common.NodeVisitor) override as bool
	func destroy override
}
class name sling.model.PreIncrementExpressionNode header extends sling.model.UnaryExpressionNode public
{
	import sling.common
	import jk.lang
	ctor
	func forExpression(expression as sling.model.ExpressionNode) static as sling.model.PreIncrementExpressionNode
	func getNodeTypeName override as string
	func createNew override as sling.common.NodeObject
	func copyTo(o as sling.common.NodeObject) override as bool
	func replaceChild(oldnode as sling.common.NodeObject, newnode as sling.common.NodeObject, doExport as bool) override as bool
	func acceptVisitor(visitor as sling.common.NodeVisitor) override as bool
	func destroy override
}
class name sling.model.NullDataTypeNode header extends sling.common.DataTypeNode public
{
	import sling.common
	import jk.lang
	ctor
	func getNodeTypeName override as string
	func createNew override as sling.common.NodeObject
	func copyTo(o as sling.common.NodeObject) override as bool
	func replaceChild(oldnode as sling.common.NodeObject, newnode as sling.common.NodeObject, doExport as bool) override as bool
	func acceptVisitor(visitor as sling.common.NodeVisitor) override as bool
	func destroy override
}
class name sling.model.ShiftRightExpressionNode header extends sling.model.BinaryExpressionNode public
{
	import sling.common
	import jk.lang
	ctor
	func instance(left as sling.model.ExpressionNode, right as sling.model.ExpressionNode) static as sling.model.ShiftRightExpressionNode
	func getNodeTypeName override as string
	func createNew override as sling.common.NodeObject
	func copyTo(o as sling.common.NodeObject) override as bool
	func replaceChild(oldnode as sling.common.NodeObject, newnode as sling.common.NodeObject, doExport as bool) override as bool
	func acceptVisitor(visitor as sling.common.NodeVisitor) override as bool
	func destroy override
	func setZeroLeftmostBit(v as bool)
	func getZeroLeftmostBit as bool
}
class name sling.model.EntityDeclarationNode header extends sling.common.NamedContainerNode implements sling.model.NodeWithModifiers public
{
	import sling.common
	import jk.lang
	ctor
	func clearImports
	func addBaseTypeExtends(type as sling.model.ReferenceDataTypeNode)
	func addBaseTypeExtendsAsExpression(expType as sling.model.ExpressionNode)
	func addBaseTypeImplements(type as sling.model.ReferenceDataTypeNode)
	func addBaseTypeAutomatic(type as sling.model.ReferenceDataTypeNode)
	func addBaseType(type as sling.model.ReferenceDataTypeNode, inheritType as int)
	func addBaseTypeForExpression(expression as sling.model.ExpressionNode, inheritType as int)
	func getNodeTypeName override as string
	func createNew override as sling.common.NodeObject
	func copyTo(o as sling.common.NodeObject) override as bool
	func replaceChild(oldnode as sling.common.NodeObject, newnode as sling.common.NodeObject, doExport as bool) override as bool
	func acceptVisitor(visitor as sling.common.NodeVisitor) override as bool
	func destroy override
	func setDescription(v as string)
	func getDescription as string
	func setMetadata(v as string)
	func getMetadata as string
	func setBaseTypes(v as vector, doExport as bool = false)
	func getBaseTypes as vector
	func exportBaseTypes as vector
	func addToBaseTypes(v as sling.model.BaseTypeNode)
	func clearBaseTypes
	func setImportEntities(v as vector, doExport as bool = false)
	func getImportEntities as vector
	func exportImportEntities as vector
	func addToImportEntities(v as sling.model.ImportEntityStatementNode)
	func clearImportEntities
	func setImportNamespaces(v as vector, doExport as bool = false)
	func getImportNamespaces as vector
	func exportImportNamespaces as vector
	func addToImportNamespaces(v as sling.model.SymbolNode)
	func clearImportNamespaces
	func setImportStaticNamespaces(v as vector, doExport as bool = false)
	func getImportStaticNamespaces as vector
	func exportImportStaticNamespaces as vector
	func addToImportStaticNamespaces(v as sling.model.ImportStaticMemberStatementNode)
	func clearImportStaticNamespaces
	func setDependencies(v as vector)
	func getDependencies as vector
	func addToDependencies(v as string)
	func clearDependencies
	func setBaseTypeMetaParameters(v as vector, doExport as bool = false)
	func getBaseTypeMetaParameters as vector
	func exportBaseTypeMetaParameters as vector
	func addToBaseTypeMetaParameters(v as sling.model.NamedParameterExpressionNode)
	func clearBaseTypeMetaParameters
	func setModifiers(v as vector, doExport as bool = false)
	func getModifiers as vector
	func exportModifiers as vector
	func addToModifiers(v as sling.common.NodeObject)
	func clearModifiers
}
class name sling.model.VariableDeclarationExpressionNode header extends sling.model.ExpressionNode public
{
	import sling.common
	import jk.lang
	ctor
	func getNodeTypeName override as string
	func createNew override as sling.common.NodeObject
	func copyTo(o as sling.common.NodeObject) override as bool
	func replaceChild(oldnode as sling.common.NodeObject, newnode as sling.common.NodeObject, doExport as bool) override as bool
	func acceptVisitor(visitor as sling.common.NodeVisitor) override as bool
	func destroy override
	func setDeclaration(v as sling.model.VariableDeclarationNode, doExport as bool = false)
	func getDeclaration as sling.model.VariableDeclarationNode
	func exportDeclaration as sling.model.VariableDeclarationNode
}
class name sling.model.DecimalDataTypeNode header extends sling.common.DataTypeNode public
{
	import sling.common
	import jk.lang
	ctor
	func getNodeTypeName override as string
	func createNew override as sling.common.NodeObject
	func copyTo(o as sling.common.NodeObject) override as bool
	func replaceChild(oldnode as sling.common.NodeObject, newnode as sling.common.NodeObject, doExport as bool) override as bool
	func acceptVisitor(visitor as sling.common.NodeVisitor) override as bool
	func destroy override
}
class name sling.model.ExternalImplementationReferenceNode header extends sling.common.NodeObject public
{
	import sling.common
	import jk.lang
	ctor
	func getNodeTypeName override as string
	func createNew override as sling.common.NodeObject
	func copyTo(o as sling.common.NodeObject) override as bool
	func replaceChild(oldnode as sling.common.NodeObject, newnode as sling.common.NodeObject, doExport as bool) override as bool
	func acceptVisitor(visitor as sling.common.NodeVisitor) override as bool
	func destroy override
	func setData(v as jk.lang.DynamicMap)
	func getData as jk.lang.DynamicMap
}
class name sling.model.WhileStatementNode header extends sling.common.NodeObject implements sling.model.LoopStatementNode public
{
	import sling.common
	import jk.lang
	ctor
	func instance(condition as sling.model.ExpressionNode, block as sling.model.BlockNode, elseBlock as sling.model.BlockNode = null) static as sling.model.WhileStatementNode
	func forSingleStatement(condition as sling.model.ExpressionNode, statement as sling.common.NodeObject) static as sling.model.WhileStatementNode
	func getNodeTypeName override as string
	func createNew override as sling.common.NodeObject
	func copyTo(o as sling.common.NodeObject) override as bool
	func replaceChild(oldnode as sling.common.NodeObject, newnode as sling.common.NodeObject, doExport as bool) override as bool
	func acceptVisitor(visitor as sling.common.NodeVisitor) override as bool
	func destroy override
	func setCondition(v as sling.model.ExpressionNode, doExport as bool = false)
	func getCondition as sling.model.ExpressionNode
	func exportCondition as sling.model.ExpressionNode
	func setBlock(v as sling.model.BlockNode, doExport as bool = false)
	func getBlock as sling.model.BlockNode
	func exportBlock as sling.model.BlockNode
	func setElseBlock(v as sling.model.BlockNode, doExport as bool = false)
	func getElseBlock as sling.model.BlockNode
	func exportElseBlock as sling.model.BlockNode
}
class name sling.model.KeyValueNode header extends sling.common.NodeObject public
{
	import sling.common
	import jk.lang
	ctor
	func forValues(key as sling.model.ExpressionNode, value as sling.model.ExpressionNode) static as sling.model.KeyValueNode
	func getNodeTypeName override as string
	func createNew override as sling.common.NodeObject
	func copyTo(o as sling.common.NodeObject) override as bool
	func replaceChild(oldnode as sling.common.NodeObject, newnode as sling.common.NodeObject, doExport as bool) override as bool
	func acceptVisitor(visitor as sling.common.NodeVisitor) override as bool
	func destroy override
	func setKey(v as sling.model.ExpressionNode, doExport as bool = false)
	func getKey as sling.model.ExpressionNode
	func exportKey as sling.model.ExpressionNode
	func setValue(v as sling.model.ExpressionNode, doExport as bool = false)
	func getValue as sling.model.ExpressionNode
	func exportValue as sling.model.ExpressionNode
	func setComment(v as string)
	func getComment as string
}
class name sling.model.TypeAliasDeclarationNode header extends sling.model.GenericCapableEntityDeclarationNode public
{
	import sling.common
	import jk.lang
	ctor
	func instance(name as string, type as sling.common.DataTypeNode) static as sling.model.TypeAliasDeclarationNode
	func getNodeTypeName override as string
	func createNew override as sling.common.NodeObject
	func copyTo(o as sling.common.NodeObject) override as bool
	func replaceChild(oldnode as sling.common.NodeObject, newnode as sling.common.NodeObject, doExport as bool) override as bool
	func acceptVisitor(visitor as sling.common.NodeVisitor) override as bool
	func destroy override
	func setType(v as sling.common.DataTypeNode, doExport as bool = false)
	func getType as sling.common.DataTypeNode
	func exportType as sling.common.DataTypeNode
}
class name sling.model.AdditionAssignmentExpressionNode header extends sling.model.AssignmentExpressionBaseNode public
{
	import sling.common
	import jk.lang
	ctor
	func instance(left as sling.model.ExpressionNode, right as sling.model.ExpressionNode) static as sling.model.AdditionAssignmentExpressionNode
	func getNodeTypeName override as string
	func createNew override as sling.common.NodeObject
	func copyTo(o as sling.common.NodeObject) override as bool
	func replaceChild(oldnode as sling.common.NodeObject, newnode as sling.common.NodeObject, doExport as bool) override as bool
	func acceptVisitor(visitor as sling.common.NodeVisitor) override as bool
	func destroy override
}
class name sling.model.MultiplicationAssignmentExpressionNode header extends sling.model.AssignmentExpressionBaseNode public
{
	import sling.common
	import jk.lang
	ctor
	func instance(left as sling.model.ExpressionNode, right as sling.model.ExpressionNode) static as sling.model.MultiplicationAssignmentExpressionNode
	func getNodeTypeName override as string
	func createNew override as sling.common.NodeObject
	func copyTo(o as sling.common.NodeObject) override as bool
	func replaceChild(oldnode as sling.common.NodeObject, newnode as sling.common.NodeObject, doExport as bool) override as bool
	func acceptVisitor(visitor as sling.common.NodeVisitor) override as bool
	func destroy override
}
class name sling.model.DynamicDataTypeNode header extends sling.common.DataTypeNode public
{
	import sling.common
	import jk.lang
	ctor
	func getNodeTypeName override as string
	func createNew override as sling.common.NodeObject
	func copyTo(o as sling.common.NodeObject) override as bool
	func replaceChild(oldnode as sling.common.NodeObject, newnode as sling.common.NodeObject, doExport as bool) override as bool
	func acceptVisitor(visitor as sling.common.NodeVisitor) override as bool
	func destroy override
}
class name sling.model.StatementNode header extends sling.common.NodeObject implements sling.model.NodeWithModifiers public
{
	import sling.common
	import jk.lang
	ctor
	func getNodeTypeName override as string
	func createNew override as sling.common.NodeObject
	func copyTo(o as sling.common.NodeObject) override as bool
	func replaceChild(oldnode as sling.common.NodeObject, newnode as sling.common.NodeObject, doExport as bool) override as bool
	func acceptVisitor(visitor as sling.common.NodeVisitor) override as bool
	func destroy override
	func setModifiers(v as vector, doExport as bool = false)
	func getModifiers as vector
	func exportModifiers as vector
	func addToModifiers(v as sling.common.NodeObject)
	func clearModifiers
}
class name sling.model.MultipleVariableDeclarationNode header extends sling.model.NodeObjectWithModifiers public
{
	import sling.common
	import jk.lang
	ctor
	func forType(type as sling.common.DataTypeNode) static as sling.model.MultipleVariableDeclarationNode
	func forArrayOfVariables(type as sling.common.DataTypeNode, variables as array) static as sling.model.MultipleVariableDeclarationNode
	func forVectorOfVariables(type as sling.common.DataTypeNode, variables as vector) static as sling.model.MultipleVariableDeclarationNode
	func getNodeTypeName override as string
	func createNew override as sling.common.NodeObject
	func copyTo(o as sling.common.NodeObject) override as bool
	func replaceChild(oldnode as sling.common.NodeObject, newnode as sling.common.NodeObject, doExport as bool) override as bool
	func acceptVisitor(visitor as sling.common.NodeVisitor) override as bool
	func destroy override
	func setType(v as sling.common.DataTypeNode, doExport as bool = false)
	func getType as sling.common.DataTypeNode
	func exportType as sling.common.DataTypeNode
	func setInitializer(v as sling.model.ExpressionNode, doExport as bool = false)
	func getInitializer as sling.model.ExpressionNode
	func exportInitializer as sling.model.ExpressionNode
	func setVariables(v as vector, doExport as bool = false)
	func getVariables as vector
	func exportVariables as vector
	func addToVariables(v as sling.common.NodeObject)
	func clearVariables
}
interface name sling.model.NodeWithModifiers header extends sling.common.NodeObject public
{
	import sling.common
	import jk.lang
	func getModifiers as vector
	func setModifiers(value as vector, doExport as bool = false)
	func addToModifiers(node as sling.common.NodeObject)
	func exportModifiers as vector
}
class name sling.model.FloorDivisionAssignmentExpressionNode header extends sling.model.AssignmentExpressionBaseNode public
{
	import sling.common
	import jk.lang
	ctor
	func instance(left as sling.model.ExpressionNode, right as sling.model.ExpressionNode) static as sling.model.FloorDivisionAssignmentExpressionNode
	func getNodeTypeName override as string
	func createNew override as sling.common.NodeObject
	func copyTo(o as sling.common.NodeObject) override as bool
	func replaceChild(oldnode as sling.common.NodeObject, newnode as sling.common.NodeObject, doExport as bool) override as bool
	func acceptVisitor(visitor as sling.common.NodeVisitor) override as bool
	func destroy override
}
class name sling.model.MemberAccessExpressionNode header extends sling.model.ExpressionNode public
{
	import sling.common
	import jk.lang
	ctor
	var TYPE_AUTO const public static as int
	var TYPE_INSTANCE const public static as int
	var TYPE_INSTANCE_VARIABLE const public static as int
	var TYPE_INSTANCE_FUNCTION const public static as int
	var TYPE_STATIC const public static as int
	var TYPE_STATIC_VARIABLE const public static as int
	var TYPE_STATIC_FUNCTION const public static as int
	var TYPE_POINTER const public static as int
	var TYPE_PROPERTY const public static as int
	var TYPE_NAMESPACE_ALIAS const public static as int
	func forExpressions(expressions as vector<sling.model.ExpressionNode>) static as sling.model.ExpressionNode
	func forNodes(parent as sling.model.ExpressionNode, child as sling.model.ExpressionNode) static as sling.model.MemberAccessExpressionNode
	func forSymbolNames(parent as string, child as string) static as sling.model.MemberAccessExpressionNode
	func forSymbols(names as array) static as sling.model.ExpressionNode
	func getPreviousNode(node as sling.common.NodeObject) static as sling.model.ExpressionNode
	func isChildOf(xpr as sling.model.ExpressionNode) static as bool
	func append(toappend as sling.model.ExpressionNode, original as sling.model.ExpressionNode) static as sling.model.ExpressionNode
	func isChild(node as sling.common.NodeObject) static as bool
	func findFromChild(node as sling.common.NodeObject) static as sling.model.MemberAccessExpressionNode
	func getLastNode as sling.model.ExpressionNode
	func removeLastNode as sling.model.ExpressionNode
	func getAllExpressionsTo(results as vector<sling.model.ExpressionNode>)
	func getAllExpressions as vector<sling.model.ExpressionNode>
	func getNodeTypeName override as string
	func createNew override as sling.common.NodeObject
	func copyTo(o as sling.common.NodeObject) override as bool
	func replaceChild(oldnode as sling.common.NodeObject, newnode as sling.common.NodeObject, doExport as bool) override as bool
	func acceptVisitor(visitor as sling.common.NodeVisitor) override as bool
	func destroy override
	func setParentExpression(v as sling.model.ExpressionNode, doExport as bool = false)
	func getParentExpression as sling.model.ExpressionNode
	func exportParentExpression as sling.model.ExpressionNode
	func setChildExpression(v as sling.model.ExpressionNode, doExport as bool = false)
	func getChildExpression as sling.model.ExpressionNode
	func exportChildExpression as sling.model.ExpressionNode
	func setAccessType(v as int)
	func getAccessType as int
}
class name sling.model.Modifier header public
{
	import sling.common
	import jk.lang
	ctor
	var PUBLIC const public static as string
	var PRIVATE const public static as string
	var PROTECTED const public static as string
	var NAMESPACEPRIVATE const public static as string
	var STATIC const public static as string
	var ABSTRACT const public static as string
	var EXTERNAL const public static as string
	var IMPLEMENT const public static as string
	var OVERRIDE const public static as string
	var VIRTUAL const public static as string
	var FUNDAMENTAL const public static as string
	var PARTIAL const public static as string
	var CONSTANT const public static as string
	var NEW const public static as string
	var STUB const public static as string
	var WEAK const public static as string
	var FINAL const public static as string
	var GLOBAL const public static as string
	var HEADER const public static as string
	var PROPERTY const public static as string
	var READONLY const public static as string
	var WRITEONLY const public static as string
	var READWRITE const public static as string
	var VOLATILE const public static as string
	var THROWABLE const public static as string
	var TRANSIENT const public static as string
	var DEPRECATED const public static as string
	var ASYNCHRONOUS const public static as string
	var SYNCHRONIZED const public static as string
	var IMPLEMENTATION const public static as string
	var REFERENCE const public static as string
	func isVisibilityModifier(mod as string) static as bool
}
class name sling.model.DynamicOrExpressionNode header extends sling.model.BinaryExpressionNode public
{
	import sling.common
	import jk.lang
	ctor
	func instance(left as sling.model.ExpressionNode, right as sling.model.ExpressionNode) static as sling.model.DynamicOrExpressionNode
	func getNodeTypeName override as string
	func createNew override as sling.common.NodeObject
	func copyTo(o as sling.common.NodeObject) override as bool
	func replaceChild(oldnode as sling.common.NodeObject, newnode as sling.common.NodeObject, doExport as bool) override as bool
	func acceptVisitor(visitor as sling.common.NodeVisitor) override as bool
	func destroy override
}
class name sling.model.ThrowStatementNode header extends sling.common.NodeObject public
{
	import sling.common
	import jk.lang
	ctor
	func forExpression(expression as sling.model.ExpressionNode) static as sling.model.ThrowStatementNode
	func getNodeTypeName override as string
	func createNew override as sling.common.NodeObject
	func copyTo(o as sling.common.NodeObject) override as bool
	func replaceChild(oldnode as sling.common.NodeObject, newnode as sling.common.NodeObject, doExport as bool) override as bool
	func acceptVisitor(visitor as sling.common.NodeVisitor) override as bool
	func destroy override
	func setExpression(v as sling.model.ExpressionNode, doExport as bool = false)
	func getExpression as sling.model.ExpressionNode
	func exportExpression as sling.model.ExpressionNode
}
class name sling.model.AdditionExpressionNode header extends sling.model.ArithmeticExpressionNode public
{
	import sling.common
	import jk.lang
	ctor
	func instance(left as sling.model.ExpressionNode, right as sling.model.ExpressionNode) static as sling.model.AdditionExpressionNode
	func getNodeTypeName override as string
	func createNew override as sling.common.NodeObject
	func copyTo(o as sling.common.NodeObject) override as bool
	func replaceChild(oldnode as sling.common.NodeObject, newnode as sling.common.NodeObject, doExport as bool) override as bool
	func acceptVisitor(visitor as sling.common.NodeVisitor) override as bool
	func destroy override
}
class name sling.model.LabeledStatementNode header extends sling.common.NodeObject implements sling.common.NamedNode public
{
	import sling.common
	import jk.lang
	ctor
	func forLabel(label as string) static as sling.model.LabeledStatementNode
	func getNodeName as string
	func renameNode(name as string)
	func setName(name as string)
	func getNodeTypeName override as string
	func createNew override as sling.common.NodeObject
	func copyTo(o as sling.common.NodeObject) override as bool
	func replaceChild(oldnode as sling.common.NodeObject, newnode as sling.common.NodeObject, doExport as bool) override as bool
	func acceptVisitor(visitor as sling.common.NodeVisitor) override as bool
	func destroy override
	func setStatement(v as sling.common.NodeObject, doExport as bool = false)
	func getStatement as sling.common.NodeObject
	func exportStatement as sling.common.NodeObject
	func getName as string
}
class name sling.model.ObjectDataTypeNode header extends sling.common.DataTypeNode public
{
	import sling.common
	import jk.lang
	ctor
	func getNodeTypeName override as string
	func createNew override as sling.common.NodeObject
	func copyTo(o as sling.common.NodeObject) override as bool
	func replaceChild(oldnode as sling.common.NodeObject, newnode as sling.common.NodeObject, doExport as bool) override as bool
	func acceptVisitor(visitor as sling.common.NodeVisitor) override as bool
	func destroy override
}
class name sling.model.StringLiteralExpressionNode header extends sling.model.LiteralExpressionNode implements sling.model.NodeWithModifiers public
{
	import sling.common
	import jk.lang
	func forValue(value as string) static as sling.model.StringLiteralExpressionNode
	ctor
	func getNodeTypeName override as string
	func createNew override as sling.common.NodeObject
	func copyTo(o as sling.common.NodeObject) override as bool
	func replaceChild(oldnode as sling.common.NodeObject, newnode as sling.common.NodeObject, doExport as bool) override as bool
	func acceptVisitor(visitor as sling.common.NodeVisitor) override as bool
	func destroy override
	func setType(v as sling.common.DataTypeNode, doExport as bool = false)
	func getType as sling.common.DataTypeNode
	func exportType as sling.common.DataTypeNode
	func setValue(v as string)
	func getValue as string
	func setIsLongString(v as bool)
	func getIsLongString as bool
	func setIsRawString(v as bool)
	func getIsRawString as bool
	func setIdentifier(v as string)
	func getIdentifier as string
	func setModifiers(v as vector, doExport as bool = false)
	func getModifiers as vector
	func exportModifiers as vector
	func addToModifiers(v as sling.common.NodeObject)
	func clearModifiers
}
class name sling.model.ContinueLabelStatementNode header extends sling.model.LabeledControlStatementNode public
{
	import sling.common
	import jk.lang
	ctor
	func forLabel(label as string) static as sling.model.ContinueLabelStatementNode
	func getNodeTypeName override as string
	func createNew override as sling.common.NodeObject
	func copyTo(o as sling.common.NodeObject) override as bool
	func replaceChild(oldnode as sling.common.NodeObject, newnode as sling.common.NodeObject, doExport as bool) override as bool
	func acceptVisitor(visitor as sling.common.NodeVisitor) override as bool
	func destroy override
}
class name sling.model.DestructorDeclarationNode header extends sling.model.FunctionDeclarationBaseNode public
{
	import sling.common
	import jk.lang
	ctor
	func getNodeTypeName override as string
	func createNew override as sling.common.NodeObject
	func copyTo(o as sling.common.NodeObject) override as bool
	func replaceChild(oldnode as sling.common.NodeObject, newnode as sling.common.NodeObject, doExport as bool) override as bool
	func acceptVisitor(visitor as sling.common.NodeVisitor) override as bool
	func destroy override
}
class name sling.model.ShiftLeftAssignmentExpressionNode header extends sling.model.AssignmentExpressionBaseNode public
{
	import sling.common
	import jk.lang
	ctor
	func instance(left as sling.model.ExpressionNode, right as sling.model.ExpressionNode) static as sling.model.ShiftLeftAssignmentExpressionNode
	func getNodeTypeName override as string
	func createNew override as sling.common.NodeObject
	func copyTo(o as sling.common.NodeObject) override as bool
	func replaceChild(oldnode as sling.common.NodeObject, newnode as sling.common.NodeObject, doExport as bool) override as bool
	func acceptVisitor(visitor as sling.common.NodeVisitor) override as bool
	func destroy override
}
class name sling.model.DivisionExpressionNode header extends sling.model.ArithmeticExpressionNode public
{
	import sling.common
	import jk.lang
	ctor
	func instance(left as sling.model.ExpressionNode, right as sling.model.ExpressionNode) static as sling.model.DivisionExpressionNode
	func getNodeTypeName override as string
	func createNew override as sling.common.NodeObject
	func copyTo(o as sling.common.NodeObject) override as bool
	func replaceChild(oldnode as sling.common.NodeObject, newnode as sling.common.NodeObject, doExport as bool) override as bool
	func acceptVisitor(visitor as sling.common.NodeVisitor) override as bool
	func destroy override
}
class name sling.model.ArrayLiteralExpressionNode header extends sling.model.LiteralExpressionNode public
{
	import sling.common
	import jk.lang
	ctor
	func forExpressions(xprs as vector) static as sling.model.ArrayLiteralExpressionNode
	func getNodeTypeName override as string
	func createNew override as sling.common.NodeObject
	func copyTo(o as sling.common.NodeObject) override as bool
	func replaceChild(oldnode as sling.common.NodeObject, newnode as sling.common.NodeObject, doExport as bool) override as bool
	func acceptVisitor(visitor as sling.common.NodeVisitor) override as bool
	func destroy override
	func setType(v as sling.common.DataTypeNode, doExport as bool = false)
	func getType as sling.common.DataTypeNode
	func exportType as sling.common.DataTypeNode
	func setExpressions(v as vector, doExport as bool = false)
	func getExpressions as vector
	func exportExpressions as vector
	func addToExpressions(v as sling.model.ExpressionNode)
	func clearExpressions
}
class name sling.model.NullCoalescingExpressionNode header extends sling.model.BinaryExpressionNode public
{
	import sling.common
	import jk.lang
	ctor
	func forExpressions(left as sling.model.ExpressionNode, right as sling.model.ExpressionNode) static as sling.model.NullCoalescingExpressionNode
	func getNodeTypeName override as string
	func createNew override as sling.common.NodeObject
	func copyTo(o as sling.common.NodeObject) override as bool
	func replaceChild(oldnode as sling.common.NodeObject, newnode as sling.common.NodeObject, doExport as bool) override as bool
	func acceptVisitor(visitor as sling.common.NodeVisitor) override as bool
	func destroy override
}
class name sling.model.CaseLessThanBlockNode header extends sling.model.CaseBlockNode public
{
	import sling.common
	import jk.lang
	ctor
	func instance(xp as sling.model.ExpressionNode, bb as sling.model.BlockNode) static as sling.model.CaseLessThanBlockNode
	func getNodeTypeName override as string
	func createNew override as sling.common.NodeObject
	func copyTo(o as sling.common.NodeObject) override as bool
	func replaceChild(oldnode as sling.common.NodeObject, newnode as sling.common.NodeObject, doExport as bool) override as bool
	func acceptVisitor(visitor as sling.common.NodeVisitor) override as bool
	func destroy override
	func setExpression(v as sling.model.ExpressionNode, doExport as bool = false)
	func getExpression as sling.model.ExpressionNode
	func exportExpression as sling.model.ExpressionNode
}
class name sling.model.GetAddressExpressionNode header extends sling.model.ExpressionNode public
{
	import sling.common
	import jk.lang
	ctor
	func getNodeTypeName override as string
	func createNew override as sling.common.NodeObject
	func copyTo(o as sling.common.NodeObject) override as bool
	func replaceChild(oldnode as sling.common.NodeObject, newnode as sling.common.NodeObject, doExport as bool) override as bool
	func acceptVisitor(visitor as sling.common.NodeVisitor) override as bool
	func destroy override
	func setExpression(v as sling.model.ExpressionNode, doExport as bool = false)
	func getExpression as sling.model.ExpressionNode
	func exportExpression as sling.model.ExpressionNode
}
class name sling.model.PreprocessorIfStatementNode header extends sling.common.NodeObject public
{
	import sling.common
	import jk.lang
	ctor
	func instance(condition as sling.model.ExpressionNode, ifBlock as sling.model.FlatBlockNode = null, elseBlock as sling.model.FlatBlockNode = null) static as sling.model.PreprocessorIfStatementNode
	func getNodeTypeName override as string
	func createNew override as sling.common.NodeObject
	func copyTo(o as sling.common.NodeObject) override as bool
	func replaceChild(oldnode as sling.common.NodeObject, newnode as sling.common.NodeObject, doExport as bool) override as bool
	func acceptVisitor(visitor as sling.common.NodeVisitor) override as bool
	func destroy override
	func setCondition(v as sling.model.ExpressionNode, doExport as bool = false)
	func getCondition as sling.model.ExpressionNode
	func exportCondition as sling.model.ExpressionNode
	func setIfBlock(v as sling.model.FlatBlockNode, doExport as bool = false)
	func getIfBlock as sling.model.FlatBlockNode
	func exportIfBlock as sling.model.FlatBlockNode
	func setElseBlock(v as sling.model.FlatBlockNode, doExport as bool = false)
	func getElseBlock as sling.model.FlatBlockNode
	func exportElseBlock as sling.model.FlatBlockNode
	func setElseBlockComment(v as sling.model.CommentNode, doExport as bool = false)
	func getElseBlockComment as sling.model.CommentNode
	func exportElseBlockComment as sling.model.CommentNode
}
class name sling.model.PostDecrementExpressionNode header extends sling.model.UnaryExpressionNode public
{
	import sling.common
	import jk.lang
	ctor
	func forExpression(expression as sling.model.ExpressionNode) static as sling.model.PostDecrementExpressionNode
	func getNodeTypeName override as string
	func createNew override as sling.common.NodeObject
	func copyTo(o as sling.common.NodeObject) override as bool
	func replaceChild(oldnode as sling.common.NodeObject, newnode as sling.common.NodeObject, doExport as bool) override as bool
	func acceptVisitor(visitor as sling.common.NodeVisitor) override as bool
	func destroy override
}
class name sling.model.ForceUnwrapOptionalExpressionNode header extends sling.model.UnaryExpressionNode public
{
	import sling.common
	import jk.lang
	ctor
	func forExpression(expression as sling.model.ExpressionNode) static as sling.model.ForceUnwrapOptionalExpressionNode
	func getNodeTypeName override as string
	func createNew override as sling.common.NodeObject
	func copyTo(o as sling.common.NodeObject) override as bool
	func replaceChild(oldnode as sling.common.NodeObject, newnode as sling.common.NodeObject, doExport as bool) override as bool
	func acceptVisitor(visitor as sling.common.NodeVisitor) override as bool
	func destroy override
}
class name sling.model.BufferDataTypeNode header extends sling.common.DataTypeNode public
{
	import sling.common
	import jk.lang
	ctor
	func getNodeTypeName override as string
	func createNew override as sling.common.NodeObject
	func copyTo(o as sling.common.NodeObject) override as bool
	func replaceChild(oldnode as sling.common.NodeObject, newnode as sling.common.NodeObject, doExport as bool) override as bool
	func acceptVisitor(visitor as sling.common.NodeVisitor) override as bool
	func destroy override
}
class name sling.model.ExceptionDataTypeNode header extends sling.common.DataTypeNode public
{
	import sling.common
	import jk.lang
	ctor
	func getNodeTypeName override as string
	func createNew override as sling.common.NodeObject
	func copyTo(o as sling.common.NodeObject) override as bool
	func replaceChild(oldnode as sling.common.NodeObject, newnode as sling.common.NodeObject, doExport as bool) override as bool
	func acceptVisitor(visitor as sling.common.NodeVisitor) override as bool
	func destroy override
}
class name sling.model.VoidDataTypeNode header extends sling.common.DataTypeNode public
{
	import sling.common
	import jk.lang
	ctor
	func getNodeTypeName override as string
	func createNew override as sling.common.NodeObject
	func copyTo(o as sling.common.NodeObject) override as bool
	func replaceChild(oldnode as sling.common.NodeObject, newnode as sling.common.NodeObject, doExport as bool) override as bool
	func acceptVisitor(visitor as sling.common.NodeVisitor) override as bool
	func destroy override
}
class name sling.model.TryCatchExpressionNode header extends sling.model.ExpressionNode public
{
	import sling.common
	import jk.lang
	ctor
	func forExpression(xpr as sling.model.ExpressionNode) static as sling.model.TryCatchExpressionNode
	func getNodeTypeName override as string
	func createNew override as sling.common.NodeObject
	func copyTo(o as sling.common.NodeObject) override as bool
	func replaceChild(oldnode as sling.common.NodeObject, newnode as sling.common.NodeObject, doExport as bool) override as bool
	func acceptVisitor(visitor as sling.common.NodeVisitor) override as bool
	func destroy override
	func setExpression(v as sling.model.ExpressionNode, doExport as bool = false)
	func getExpression as sling.model.ExpressionNode
	func exportExpression as sling.model.ExpressionNode
}
class name sling.model.CaseMultipleEqualsBlockNode header extends sling.model.CaseBlockNode public
{
	import sling.common
	import jk.lang
	ctor
	func forVectorOfExpessions(expressions as vector<sling.model.ExpressionNode>, bb as sling.model.BlockNode) static as sling.model.CaseMultipleEqualsBlockNode
	func forVectorOfObjects(expressions as vector, bb as sling.model.BlockNode) static as sling.model.CaseMultipleEqualsBlockNode
	func getNodeTypeName override as string
	func createNew override as sling.common.NodeObject
	func copyTo(o as sling.common.NodeObject) override as bool
	func replaceChild(oldnode as sling.common.NodeObject, newnode as sling.common.NodeObject, doExport as bool) override as bool
	func acceptVisitor(visitor as sling.common.NodeVisitor) override as bool
	func destroy override
	func setExpressions(v as vector, doExport as bool = false)
	func getExpressions as vector
	func exportExpressions as vector
	func addToExpressions(v as sling.model.ExpressionNode)
	func clearExpressions
}
class name sling.model.RangeExpressionNode header extends sling.model.ExpressionNode public
{
	import sling.common
	import jk.lang
	func instance(from as sling.model.ExpressionNode, to as sling.model.ExpressionNode) static as sling.model.RangeExpressionNode
	var TYPE_NONE const public static as int
	var TYPE_EXCLUDE_UPPER_BOUND const public static as int
	var TYPE_EXCLUDE_LOWER_BOUND const public static as int
	var TYPE_EXCLUDE_BOTH_BOUNDS const public static as int
	ctor
	func getNodeTypeName override as string
	func createNew override as sling.common.NodeObject
	func copyTo(o as sling.common.NodeObject) override as bool
	func replaceChild(oldnode as sling.common.NodeObject, newnode as sling.common.NodeObject, doExport as bool) override as bool
	func acceptVisitor(visitor as sling.common.NodeVisitor) override as bool
	func destroy override
	func setLowerBound(v as sling.model.ExpressionNode, doExport as bool = false)
	func getLowerBound as sling.model.ExpressionNode
	func exportLowerBound as sling.model.ExpressionNode
	func setUpperBound(v as sling.model.ExpressionNode, doExport as bool = false)
	func getUpperBound as sling.model.ExpressionNode
	func exportUpperBound as sling.model.ExpressionNode
	func setStep(v as sling.model.ExpressionNode, doExport as bool = false)
	func getStep as sling.model.ExpressionNode
	func exportStep as sling.model.ExpressionNode
	func setType(v as sling.common.DataTypeNode, doExport as bool = false)
	func getType as sling.common.DataTypeNode
	func exportType as sling.common.DataTypeNode
	func setExclusionType(v as int)
	func getExclusionType as int
}
class name sling.model.FileSystemTextFileReferenceExpressionNode header extends sling.model.FileSystemReferenceExpressionNode public
{
	import sling.common
	import jk.lang
	ctor
	func getNodeTypeName override as string
	func createNew override as sling.common.NodeObject
	func copyTo(o as sling.common.NodeObject) override as bool
	func replaceChild(oldnode as sling.common.NodeObject, newnode as sling.common.NodeObject, doExport as bool) override as bool
	func acceptVisitor(visitor as sling.common.NodeVisitor) override as bool
	func destroy override
}
class name sling.model.GreaterThanExpressionNode header extends sling.model.ComparisonExpressionNode public
{
	import sling.common
	import jk.lang
	ctor
	func instance(left as sling.model.ExpressionNode, right as sling.model.ExpressionNode) static as sling.model.GreaterThanExpressionNode
	func getNodeTypeName override as string
	func createNew override as sling.common.NodeObject
	func copyTo(o as sling.common.NodeObject) override as bool
	func replaceChild(oldnode as sling.common.NodeObject, newnode as sling.common.NodeObject, doExport as bool) override as bool
	func acceptVisitor(visitor as sling.common.NodeVisitor) override as bool
	func destroy override
}
class name sling.model.NotEqualsExpressionNode header extends sling.model.EqualityComparisonExpressionNode public
{
	import sling.common
	import jk.lang
	ctor
	func forNull(expr as sling.model.ExpressionNode) static as sling.model.NotEqualsExpressionNode
	func instance(left as sling.model.ExpressionNode, right as sling.model.ExpressionNode) static as sling.model.NotEqualsExpressionNode
	func getNodeTypeName override as string
	func createNew override as sling.common.NodeObject
	func copyTo(o as sling.common.NodeObject) override as bool
	func replaceChild(oldnode as sling.common.NodeObject, newnode as sling.common.NodeObject, doExport as bool) override as bool
	func acceptVisitor(visitor as sling.common.NodeVisitor) override as bool
	func destroy override
}
class name sling.model.EqualsExpressionNode header extends sling.model.EqualityComparisonExpressionNode public
{
	import sling.common
	import jk.lang
	ctor
	func forNull(expr as sling.model.ExpressionNode) static as sling.model.EqualsExpressionNode
	func instance(left as sling.model.ExpressionNode, right as sling.model.ExpressionNode) static as sling.model.EqualsExpressionNode
	func getNodeTypeName override as string
	func createNew override as sling.common.NodeObject
	func copyTo(o as sling.common.NodeObject) override as bool
	func replaceChild(oldnode as sling.common.NodeObject, newnode as sling.common.NodeObject, doExport as bool) override as bool
	func acceptVisitor(visitor as sling.common.NodeVisitor) override as bool
	func destroy override
}
class name sling.model.TemplateStatementNode header extends sling.common.NodeObject public
{
	import jk.fs
	import sling.common
	import jk.lang
	ctor
	func getNodeTypeName override as string
	func createNew override as sling.common.NodeObject
	func copyTo(o as sling.common.NodeObject) override as bool
	func replaceChild(oldnode as sling.common.NodeObject, newnode as sling.common.NodeObject, doExport as bool) override as bool
	func acceptVisitor(visitor as sling.common.NodeVisitor) override as bool
	func destroy override
	func setSymbol(v as sling.model.SymbolNode, doExport as bool = false)
	func getSymbol as sling.model.SymbolNode
	func exportSymbol as sling.model.SymbolNode
	func setName(v as string)
	func getName as string
	func setRelativeTo(v as jk.fs.File)
	func getRelativeTo as jk.fs.File
}
class name sling.model.StyleSheetDeclarationNode header extends sling.common.NodeObject public
{
	import sling.common
	import jk.lang
	ctor
	func getNodeTypeName override as string
	func createNew override as sling.common.NodeObject
	func copyTo(o as sling.common.NodeObject) override as bool
	func replaceChild(oldnode as sling.common.NodeObject, newnode as sling.common.NodeObject, doExport as bool) override as bool
	func acceptVisitor(visitor as sling.common.NodeVisitor) override as bool
	func destroy override
	func setBody(v as sling.model.BlockNode, doExport as bool = false)
	func getBody as sling.model.BlockNode
	func exportBody as sling.model.BlockNode
	func setName(v as string)
	func getName as string
}
interface name sling.model.LoopStatementNode header public
{
	import sling.common
	import jk.lang
	func getBlock as sling.model.BlockNode
}
class name sling.model.ImportEntityStatementNode header extends sling.model.ImportStatementNode public
{
	import sling.common
	import jk.lang
	ctor
	func getNodeTypeName override as string
	func createNew override as sling.common.NodeObject
	func copyTo(o as sling.common.NodeObject) override as bool
	func replaceChild(oldnode as sling.common.NodeObject, newnode as sling.common.NodeObject, doExport as bool) override as bool
	func acceptVisitor(visitor as sling.common.NodeVisitor) override as bool
	func destroy override
	func setEntity(v as sling.model.SymbolNode, doExport as bool = false)
	func getEntity as sling.model.SymbolNode
	func exportEntity as sling.model.SymbolNode
	func setContainer(v as sling.model.SymbolNode, doExport as bool = false)
	func getContainer as sling.model.SymbolNode
	func exportContainer as sling.model.SymbolNode
	func setAllMembers(v as bool)
	func getAllMembers as bool
}
class name sling.model.ModuloAssignmentExpressionNode header extends sling.model.AssignmentExpressionBaseNode public
{
	import sling.common
	import jk.lang
	ctor
	func instance(left as sling.model.ExpressionNode, right as sling.model.ExpressionNode) static as sling.model.ModuloAssignmentExpressionNode
	func getNodeTypeName override as string
	func createNew override as sling.common.NodeObject
	func copyTo(o as sling.common.NodeObject) override as bool
	func replaceChild(oldnode as sling.common.NodeObject, newnode as sling.common.NodeObject, doExport as bool) override as bool
	func acceptVisitor(visitor as sling.common.NodeVisitor) override as bool
	func destroy override
}
class name sling.model.IntegerLiteralExpressionNode header extends sling.model.LiteralExpressionNode public
{
	import sling.common
	import jk.lang
	func forValue(value as long) static as sling.model.IntegerLiteralExpressionNode
	var FORMAT_DECIMAL const public static as int
	var FORMAT_HEXADECIMAL const public static as int
	var FORMAT_BINARY const public static as int
	var FORMAT_OCTAL const public static as int
	ctor
	func setType(type as int)
	func getNodeTypeName override as string
	func createNew override as sling.common.NodeObject
	func copyTo(o as sling.common.NodeObject) override as bool
	func replaceChild(oldnode as sling.common.NodeObject, newnode as sling.common.NodeObject, doExport as bool) override as bool
	func acceptVisitor(visitor as sling.common.NodeVisitor) override as bool
	func destroy override
	func setValue(v as long)
	func getValue as long
	func getType as int
	func setFormat(v as int)
	func getFormat as int
}
class name sling.model.DelegateDeclarationNode header extends sling.model.EntityDeclarationNode implements sling.common.NamedNode public
{
	import sling.common
	import jk.lang
	ctor
	func forDeclaration(declaration as sling.model.FunctionDeclarationNode) static as sling.model.DelegateDeclarationNode
	func getNodeName override as string
	func renameNode(name as string) override
	func getReturnType as sling.common.DataTypeNode
	func getParameters as vector
	func setReturnType(type as sling.common.DataTypeNode) as sling.model.DelegateDeclarationNode
	func setParameters(params as vector) as sling.model.DelegateDeclarationNode
	func getNodeTypeName override as string
	func createNew override as sling.common.NodeObject
	func copyTo(o as sling.common.NodeObject) override as bool
	func replaceChild(oldnode as sling.common.NodeObject, newnode as sling.common.NodeObject, doExport as bool) override as bool
	func acceptVisitor(visitor as sling.common.NodeVisitor) override as bool
	func destroy override
	func setDeclaration(v as sling.model.FunctionDeclarationNode, doExport as bool = false)
	func getDeclaration as sling.model.FunctionDeclarationNode
	func exportDeclaration as sling.model.FunctionDeclarationNode
}
class name sling.model.ImplementsModifierNode header extends sling.common.NodeObject public
{
	import sling.common
	import jk.lang
	ctor
	func getNodeTypeName override as string
	func createNew override as sling.common.NodeObject
	func copyTo(o as sling.common.NodeObject) override as bool
	func replaceChild(oldnode as sling.common.NodeObject, newnode as sling.common.NodeObject, doExport as bool) override as bool
	func acceptVisitor(visitor as sling.common.NodeVisitor) override as bool
	func destroy override
	func setSymbol(v as sling.model.SymbolNode, doExport as bool = false)
	func getSymbol as sling.model.SymbolNode
	func exportSymbol as sling.model.SymbolNode
}
class name sling.model.ShiftRightAssignmentExpressionNode header extends sling.model.AssignmentExpressionBaseNode public
{
	import sling.common
	import jk.lang
	ctor
	func instance(left as sling.model.ExpressionNode, right as sling.model.ExpressionNode) static as sling.model.ShiftRightAssignmentExpressionNode
	func getNodeTypeName override as string
	func createNew override as sling.common.NodeObject
	func copyTo(o as sling.common.NodeObject) override as bool
	func replaceChild(oldnode as sling.common.NodeObject, newnode as sling.common.NodeObject, doExport as bool) override as bool
	func acceptVisitor(visitor as sling.common.NodeVisitor) override as bool
	func destroy override
	func setZeroLeftmostBit(v as bool)
	func getZeroLeftmostBit as bool
}
class name sling.model.EmptyStatementNode header extends sling.common.NodeObject public
{
	import sling.common
	import jk.lang
	ctor
	func getNodeTypeName override as string
	func createNew override as sling.common.NodeObject
	func copyTo(o as sling.common.NodeObject) override as bool
	func replaceChild(oldnode as sling.common.NodeObject, newnode as sling.common.NodeObject, doExport as bool) override as bool
	func acceptVisitor(visitor as sling.common.NodeVisitor) override as bool
	func destroy override
	func setComment(v as string)
	func getComment as string
}
class name sling.model.BitwiseOrExpressionNode header extends sling.model.BinaryExpressionNode public
{
	import sling.common
	import jk.lang
	ctor
	func instance(left as sling.model.ExpressionNode, right as sling.model.ExpressionNode) static as sling.model.BitwiseOrExpressionNode
	func getNodeTypeName override as string
	func createNew override as sling.common.NodeObject
	func copyTo(o as sling.common.NodeObject) override as bool
	func replaceChild(oldnode as sling.common.NodeObject, newnode as sling.common.NodeObject, doExport as bool) override as bool
	func acceptVisitor(visitor as sling.common.NodeVisitor) override as bool
	func destroy override
}
class name sling.model.ConstrainedDataTypeNode header extends sling.model.DataTypeExtenderNode public
{
	import sling.common
	import jk.lang
	ctor
	func forPrimaryType(pt as sling.common.DataTypeNode) static as sling.model.ConstrainedDataTypeNode
	func getNodeTypeName override as string
	func createNew override as sling.common.NodeObject
	func copyTo(o as sling.common.NodeObject) override as bool
	func replaceChild(oldnode as sling.common.NodeObject, newnode as sling.common.NodeObject, doExport as bool) override as bool
	func acceptVisitor(visitor as sling.common.NodeVisitor) override as bool
	func destroy override
	func setBaseTypes(v as vector, doExport as bool = false)
	func getBaseTypes as vector
	func exportBaseTypes as vector
	func addToBaseTypes(v as sling.common.DataTypeNode)
	func clearBaseTypes
}
class name sling.model.PreprocessorIsDefinedExpressionNode header extends sling.model.ExpressionNode public
{
	import sling.common
	import jk.lang
	ctor
	func instance(variable as string) static as sling.model.PreprocessorIsDefinedExpressionNode
	func forVariable(variable as string) static as sling.model.PreprocessorIsDefinedExpressionNode
	func getNodeTypeName override as string
	func createNew override as sling.common.NodeObject
	func copyTo(o as sling.common.NodeObject) override as bool
	func replaceChild(oldnode as sling.common.NodeObject, newnode as sling.common.NodeObject, doExport as bool) override as bool
	func acceptVisitor(visitor as sling.common.NodeVisitor) override as bool
	func destroy override
	func setVariable(v as string)
	func getVariable as string
}
class name sling.model.TypeCheckExpressionNode header extends sling.model.ExpressionNode public
{
	import sling.common
	import jk.lang
	ctor
	func instance(type as sling.common.DataTypeNode, expression as sling.model.ExpressionNode, negate as bool = false) static as sling.model.TypeCheckExpressionNode
	func getNodeTypeName override as string
	func createNew override as sling.common.NodeObject
	func copyTo(o as sling.common.NodeObject) override as bool
	func replaceChild(oldnode as sling.common.NodeObject, newnode as sling.common.NodeObject, doExport as bool) override as bool
	func acceptVisitor(visitor as sling.common.NodeVisitor) override as bool
	func destroy override
	func setType(v as sling.common.DataTypeNode, doExport as bool = false)
	func getType as sling.common.DataTypeNode
	func exportType as sling.common.DataTypeNode
	func setExpression(v as sling.model.ExpressionNode, doExport as bool = false)
	func getExpression as sling.model.ExpressionNode
	func exportExpression as sling.model.ExpressionNode
	func setNegate(v as bool)
	func getNegate as bool
}
class name sling.model.MultipleExpressionNode header extends sling.model.ExpressionNode public
{
	import sling.common
	import jk.lang
	ctor
	func getNodeTypeName override as string
	func createNew override as sling.common.NodeObject
	func copyTo(o as sling.common.NodeObject) override as bool
	func replaceChild(oldnode as sling.common.NodeObject, newnode as sling.common.NodeObject, doExport as bool) override as bool
	func acceptVisitor(visitor as sling.common.NodeVisitor) override as bool
	func destroy override
	func setExpressions(v as vector, doExport as bool = false)
	func getExpressions as vector
	func exportExpressions as vector
	func addToExpressions(v as sling.model.ExpressionNode)
	func clearExpressions
}
class name sling.model.UIExpressionNode header extends sling.model.ExpressionNode implements sling.common.NamedNode public
{
	import sling.common
	import jk.lang
	ctor
	func getNodeName as string
	func renameNode(name as string)
	func setName(name as string)
	func getNodeTypeName override as string
	func createNew override as sling.common.NodeObject
	func copyTo(o as sling.common.NodeObject) override as bool
	func replaceChild(oldnode as sling.common.NodeObject, newnode as sling.common.NodeObject, doExport as bool) override as bool
	func acceptVisitor(visitor as sling.common.NodeVisitor) override as bool
	func destroy override
	func setExpression(v as sling.model.ExpressionNode, doExport as bool = false)
	func getExpression as sling.model.ExpressionNode
	func exportExpression as sling.model.ExpressionNode
	func getName as string
	func setLayoutParams(v as vector, doExport as bool = false)
	func getLayoutParams as vector
	func exportLayoutParams as vector
	func addToLayoutParams(v as sling.model.ExpressionNode)
	func clearLayoutParams
	func setChildren(v as vector, doExport as bool = false)
	func getChildren as vector
	func exportChildren as vector
	func addToChildren(v as sling.common.NodeObject)
	func clearChildren
}
class name sling.model.CaseDefaultBlockNode header extends sling.model.CaseBlockNode public
{
	import sling.common
	import jk.lang
	ctor
	func instance(bb as sling.model.BlockNode) static as sling.model.CaseDefaultBlockNode
	func getNodeTypeName override as string
	func createNew override as sling.common.NodeObject
	func copyTo(o as sling.common.NodeObject) override as bool
	func replaceChild(oldnode as sling.common.NodeObject, newnode as sling.common.NodeObject, doExport as bool) override as bool
	func acceptVisitor(visitor as sling.common.NodeVisitor) override as bool
	func destroy override
}
class name sling.model.StyleSheetRuleNode header extends sling.common.NodeObject public
{
	import sling.common
	import jk.lang
	ctor
	func getNodeTypeName override as string
	func createNew override as sling.common.NodeObject
	func copyTo(o as sling.common.NodeObject) override as bool
	func replaceChild(oldnode as sling.common.NodeObject, newnode as sling.common.NodeObject, doExport as bool) override as bool
	func acceptVisitor(visitor as sling.common.NodeVisitor) override as bool
	func destroy override
	func setBody(v as sling.model.BlockNode, doExport as bool = false)
	func getBody as sling.model.BlockNode
	func exportBody as sling.model.BlockNode
	func setSelectors(v as vector)
	func getSelectors as vector
	func addToSelectors(v as string)
	func clearSelectors
}
class name sling.model.PrintLineStatementNode header extends sling.common.NodeObject public
{
	import sling.common
	import jk.lang
	ctor
	func forExpression(expression as sling.model.ExpressionNode) static as sling.model.PrintLineStatementNode
	func getNodeTypeName override as string
	func createNew override as sling.common.NodeObject
	func copyTo(o as sling.common.NodeObject) override as bool
	func replaceChild(oldnode as sling.common.NodeObject, newnode as sling.common.NodeObject, doExport as bool) override as bool
	func acceptVisitor(visitor as sling.common.NodeVisitor) override as bool
	func destroy override
	func setExpression(v as sling.model.ExpressionNode, doExport as bool = false)
	func getExpression as sling.model.ExpressionNode
	func exportExpression as sling.model.ExpressionNode
}
class name sling.model.CaseEqualsBlockNode header extends sling.model.CaseBlockNode public
{
	import sling.common
	import jk.lang
	ctor
	func instance(xp as sling.model.ExpressionNode, bb as sling.model.BlockNode) static as sling.model.CaseEqualsBlockNode
	func getNodeTypeName override as string
	func createNew override as sling.common.NodeObject
	func copyTo(o as sling.common.NodeObject) override as bool
	func replaceChild(oldnode as sling.common.NodeObject, newnode as sling.common.NodeObject, doExport as bool) override as bool
	func acceptVisitor(visitor as sling.common.NodeVisitor) override as bool
	func destroy override
	func setExpression(v as sling.model.ExpressionNode, doExport as bool = false)
	func getExpression as sling.model.ExpressionNode
	func exportExpression as sling.model.ExpressionNode
}
class name sling.model.CaseRangeBlockNode header extends sling.model.CaseBlockNode public
{
	import sling.common
	import jk.lang
	ctor
	func instance(from as sling.model.ExpressionNode, to as sling.model.ExpressionNode, bb as sling.model.BlockNode, type as int = 0) static as sling.model.CaseRangeBlockNode
	func getNodeTypeName override as string
	func createNew override as sling.common.NodeObject
	func copyTo(o as sling.common.NodeObject) override as bool
	func replaceChild(oldnode as sling.common.NodeObject, newnode as sling.common.NodeObject, doExport as bool) override as bool
	func acceptVisitor(visitor as sling.common.NodeVisitor) override as bool
	func destroy override
	func setLowerBound(v as sling.model.ExpressionNode, doExport as bool = false)
	func getLowerBound as sling.model.ExpressionNode
	func exportLowerBound as sling.model.ExpressionNode
	func setUpperBound(v as sling.model.ExpressionNode, doExport as bool = false)
	func getUpperBound as sling.model.ExpressionNode
	func exportUpperBound as sling.model.ExpressionNode
	func setExclusionType(v as int)
	func getExclusionType as int
}
class name sling.model.BitwiseAndExpressionNode header extends sling.model.BinaryExpressionNode public
{
	import sling.common
	import jk.lang
	ctor
	func instance(left as sling.model.ExpressionNode, right as sling.model.ExpressionNode) static as sling.model.BitwiseAndExpressionNode
	func getNodeTypeName override as string
	func createNew override as sling.common.NodeObject
	func copyTo(o as sling.common.NodeObject) override as bool
	func replaceChild(oldnode as sling.common.NodeObject, newnode as sling.common.NodeObject, doExport as bool) override as bool
	func acceptVisitor(visitor as sling.common.NodeVisitor) override as bool
	func destroy override
}
class name sling.model.ExponentExpressionNode header extends sling.model.ArithmeticExpressionNode public
{
	import sling.common
	import jk.lang
	func instance(left as sling.model.ExpressionNode, right as sling.model.ExpressionNode) static as sling.model.ExponentExpressionNode
	ctor
	func getNodeTypeName override as string
	func createNew override as sling.common.NodeObject
	func copyTo(o as sling.common.NodeObject) override as bool
	func replaceChild(oldnode as sling.common.NodeObject, newnode as sling.common.NodeObject, doExport as bool) override as bool
	func acceptVisitor(visitor as sling.common.NodeVisitor) override as bool
	func destroy override
}
class name sling.model.LessOrEqualExpressionNode header extends sling.model.ComparisonExpressionNode public
{
	import sling.common
	import jk.lang
	ctor
	func instance(left as sling.model.ExpressionNode, right as sling.model.ExpressionNode) static as sling.model.LessOrEqualExpressionNode
	func getNodeTypeName override as string
	func createNew override as sling.common.NodeObject
	func copyTo(o as sling.common.NodeObject) override as bool
	func replaceChild(oldnode as sling.common.NodeObject, newnode as sling.common.NodeObject, doExport as bool) override as bool
	func acceptVisitor(visitor as sling.common.NodeVisitor) override as bool
	func destroy override
}
class name sling.model.ShiftLeftExpressionNode header extends sling.model.BinaryExpressionNode public
{
	import sling.common
	import jk.lang
	ctor
	func instance(left as sling.model.ExpressionNode, right as sling.model.ExpressionNode) static as sling.model.ShiftLeftExpressionNode
	func getNodeTypeName override as string
	func createNew override as sling.common.NodeObject
	func copyTo(o as sling.common.NodeObject) override as bool
	func replaceChild(oldnode as sling.common.NodeObject, newnode as sling.common.NodeObject, doExport as bool) override as bool
	func acceptVisitor(visitor as sling.common.NodeVisitor) override as bool
	func destroy override
}
class name sling.model.MagicalClassDeclarationNode header extends sling.model.ClassDeclarationNode public
{
	import sling.common
	import jk.lang
	ctor
	func getNodeTypeName override as string
	func createNew override as sling.common.NodeObject
	func copyTo(o as sling.common.NodeObject) override as bool
	func replaceChild(oldnode as sling.common.NodeObject, newnode as sling.common.NodeObject, doExport as bool) override as bool
	func acceptVisitor(visitor as sling.common.NodeVisitor) override as bool
	func destroy override
	func setSymbol(v as sling.model.SymbolNode, doExport as bool = false)
	func getSymbol as sling.model.SymbolNode
	func exportSymbol as sling.model.SymbolNode
}
class name sling.model.LogicalOrExpressionNode header extends sling.model.LogicalExpressionNode public
{
	import sling.common
	import jk.lang
	ctor
	func instance(left as sling.model.ExpressionNode, right as sling.model.ExpressionNode) static as sling.model.LogicalOrExpressionNode
	func getNodeTypeName override as string
	func createNew override as sling.common.NodeObject
	func copyTo(o as sling.common.NodeObject) override as bool
	func replaceChild(oldnode as sling.common.NodeObject, newnode as sling.common.NodeObject, doExport as bool) override as bool
	func acceptVisitor(visitor as sling.common.NodeVisitor) override as bool
	func destroy override
}
class name sling.model.IntegerDataTypeNode header extends sling.model.PrimitiveDataTypeNode public
{
	import sling.common
	import jk.lang
	ctor
	func forType(type as int) static as sling.model.IntegerDataTypeNode
	var TYPE_INT32 const public static as int
	var TYPE_UINT32 const public static as int
	var TYPE_INT8 const public static as int
	var TYPE_UINT8 const public static as int
	var TYPE_INT16 const public static as int
	var TYPE_UINT16 const public static as int
	var TYPE_INT64 const public static as int
	var TYPE_UINT64 const public static as int
	var TYPE_ANY const public static as int
	func getNodeTypeName override as string
	func createNew override as sling.common.NodeObject
	func copyTo(o as sling.common.NodeObject) override as bool
	func replaceChild(oldnode as sling.common.NodeObject, newnode as sling.common.NodeObject, doExport as bool) override as bool
	func acceptVisitor(visitor as sling.common.NodeVisitor) override as bool
	func destroy override
	func setType(v as int)
	func getType as int
}
class name sling.model.BlockNode header extends sling.common.ContainerNode implements sling.model.NodeWithModifiers public
{
	import sling.common
	import jk.lang
	ctor
	func forStatement(statement as sling.common.NodeObject) static as sling.model.BlockNode
	func getNodeTypeName override as string
	func createNew override as sling.common.NodeObject
	func copyTo(o as sling.common.NodeObject) override as bool
	func replaceChild(oldnode as sling.common.NodeObject, newnode as sling.common.NodeObject, doExport as bool) override as bool
	func acceptVisitor(visitor as sling.common.NodeVisitor) override as bool
	func destroy override
	func setModifiers(v as vector, doExport as bool = false)
	func getModifiers as vector
	func exportModifiers as vector
	func addToModifiers(v as sling.common.NodeObject)
	func clearModifiers
}
class name sling.model.ConstructorDeclarationNode header extends sling.model.FunctionDeclarationBaseNode public
{
	import sling.common
	import jk.lang
	ctor
	func getNodeTypeName override as string
	func createNew override as sling.common.NodeObject
	func copyTo(o as sling.common.NodeObject) override as bool
	func replaceChild(oldnode as sling.common.NodeObject, newnode as sling.common.NodeObject, doExport as bool) override as bool
	func acceptVisitor(visitor as sling.common.NodeVisitor) override as bool
	func destroy override
	func setNext(v as sling.model.FunctionCallExpressionNode, doExport as bool = false)
	func getNext as sling.model.FunctionCallExpressionNode
	func exportNext as sling.model.FunctionCallExpressionNode
}
class name sling.model.BitwiseXorExpressionNode header extends sling.model.BinaryExpressionNode public
{
	import sling.common
	import jk.lang
	ctor
	func instance(left as sling.model.ExpressionNode, right as sling.model.ExpressionNode) static as sling.model.BitwiseXorExpressionNode
	func getNodeTypeName override as string
	func createNew override as sling.common.NodeObject
	func copyTo(o as sling.common.NodeObject) override as bool
	func replaceChild(oldnode as sling.common.NodeObject, newnode as sling.common.NodeObject, doExport as bool) override as bool
	func acceptVisitor(visitor as sling.common.NodeVisitor) override as bool
	func destroy override
}
class name sling.model.WithStatementNode header extends sling.common.NodeObject public
{
	import sling.common
	import jk.lang
	ctor
	func getNodeTypeName override as string
	func createNew override as sling.common.NodeObject
	func copyTo(o as sling.common.NodeObject) override as bool
	func replaceChild(oldnode as sling.common.NodeObject, newnode as sling.common.NodeObject, doExport as bool) override as bool
	func acceptVisitor(visitor as sling.common.NodeVisitor) override as bool
	func destroy override
	func setExpression(v as sling.model.ExpressionNode, doExport as bool = false)
	func getExpression as sling.model.ExpressionNode
	func exportExpression as sling.model.ExpressionNode
	func setBlock(v as sling.model.BlockNode, doExport as bool = false)
	func getBlock as sling.model.BlockNode
	func exportBlock as sling.model.BlockNode
}
class name sling.model.SubscriptExpressionNode header extends sling.model.ExpressionNode public
{
	import sling.common
	import jk.lang
	ctor
	func forExpression(child as sling.model.ExpressionNode) static as sling.model.SubscriptExpressionNode
	func instance(child as sling.model.ExpressionNode, subscript as sling.model.ExpressionNode) static as sling.model.SubscriptExpressionNode
	func getSubscript as sling.model.ExpressionNode
	func getNodeTypeName override as string
	func createNew override as sling.common.NodeObject
	func copyTo(o as sling.common.NodeObject) override as bool
	func replaceChild(oldnode as sling.common.NodeObject, newnode as sling.common.NodeObject, doExport as bool) override as bool
	func acceptVisitor(visitor as sling.common.NodeVisitor) override as bool
	func destroy override
	func setChild(v as sling.model.ExpressionNode, doExport as bool = false)
	func getChild as sling.model.ExpressionNode
	func exportChild as sling.model.ExpressionNode
	func setSubscripts(v as vector, doExport as bool = false)
	func getSubscripts as vector
	func exportSubscripts as vector
	func addToSubscripts(v as sling.model.ExpressionNode)
	func clearSubscripts
}
class name sling.model.VariableReferenceDataTypeNode header extends sling.model.DataTypeExtenderNode public
{
	import sling.common
	import jk.lang
	ctor
	func forPrimaryType(type as sling.common.DataTypeNode) static as sling.model.VariableReferenceDataTypeNode
	func getNodeTypeName override as string
	func createNew override as sling.common.NodeObject
	func copyTo(o as sling.common.NodeObject) override as bool
	func replaceChild(oldnode as sling.common.NodeObject, newnode as sling.common.NodeObject, doExport as bool) override as bool
	func acceptVisitor(visitor as sling.common.NodeVisitor) override as bool
	func destroy override
}
class name sling.model.LogicalXorExpressionNode header extends sling.model.LogicalExpressionNode public
{
	import sling.common
	import jk.lang
	ctor
	func instance(left as sling.model.ExpressionNode, right as sling.model.ExpressionNode) static as sling.model.LogicalXorExpressionNode
	func getNodeTypeName override as string
	func createNew override as sling.common.NodeObject
	func copyTo(o as sling.common.NodeObject) override as bool
	func replaceChild(oldnode as sling.common.NodeObject, newnode as sling.common.NodeObject, doExport as bool) override as bool
	func acceptVisitor(visitor as sling.common.NodeVisitor) override as bool
	func destroy override
}
class name sling.model.CaseLessOrEqualBlockNode header extends sling.model.CaseBlockNode public
{
	import sling.common
	import jk.lang
	ctor
	func instance(xp as sling.model.ExpressionNode, bb as sling.model.BlockNode) static as sling.model.CaseLessOrEqualBlockNode
	func getNodeTypeName override as string
	func createNew override as sling.common.NodeObject
	func copyTo(o as sling.common.NodeObject) override as bool
	func replaceChild(oldnode as sling.common.NodeObject, newnode as sling.common.NodeObject, doExport as bool) override as bool
	func acceptVisitor(visitor as sling.common.NodeVisitor) override as bool
	func destroy override
	func setExpression(v as sling.model.ExpressionNode, doExport as bool = false)
	func getExpression as sling.model.ExpressionNode
	func exportExpression as sling.model.ExpressionNode
}
class name sling.model.LogicalNotExpressionNode header extends sling.model.UnaryExpressionNode public
{
	import sling.common
	import jk.lang
	ctor
	func forExpression(expression as sling.model.ExpressionNode) static as sling.model.LogicalNotExpressionNode
	func getNodeTypeName override as string
	func createNew override as sling.common.NodeObject
	func copyTo(o as sling.common.NodeObject) override as bool
	func replaceChild(oldnode as sling.common.NodeObject, newnode as sling.common.NodeObject, doExport as bool) override as bool
	func acceptVisitor(visitor as sling.common.NodeVisitor) override as bool
	func destroy override
}
class name sling.model.GoToLabelStatementNode header extends sling.common.NodeObject public
{
	import sling.common
	import jk.lang
	ctor
	func getNodeTypeName override as string
	func createNew override as sling.common.NodeObject
	func copyTo(o as sling.common.NodeObject) override as bool
	func replaceChild(oldnode as sling.common.NodeObject, newnode as sling.common.NodeObject, doExport as bool) override as bool
	func acceptVisitor(visitor as sling.common.NodeVisitor) override as bool
	func destroy override
	func setTarget(v as sling.model.ExpressionNode, doExport as bool = false)
	func getTarget as sling.model.ExpressionNode
	func exportTarget as sling.model.ExpressionNode
}
class name sling.model.StaticBlockDeclarationNode header extends sling.common.NodeObject public
{
	import sling.common
	import jk.lang
	ctor
	func forBlock(block as sling.model.BlockNode) static as sling.model.StaticBlockDeclarationNode
	func getNodeTypeName override as string
	func createNew override as sling.common.NodeObject
	func copyTo(o as sling.common.NodeObject) override as bool
	func replaceChild(oldnode as sling.common.NodeObject, newnode as sling.common.NodeObject, doExport as bool) override as bool
	func acceptVisitor(visitor as sling.common.NodeVisitor) override as bool
	func destroy override
	func setBlock(v as sling.model.BlockNode, doExport as bool = false)
	func getBlock as sling.model.BlockNode
	func exportBlock as sling.model.BlockNode
}
class name sling.model.BinaryExpressionNode header extends sling.model.ExpressionNode abstract public
{
	import sling.common
	import jk.lang
	ctor
	func getNodeTypeName override as string
	func copyTo(o as sling.common.NodeObject) override as bool
	func replaceChild(oldnode as sling.common.NodeObject, newnode as sling.common.NodeObject, doExport as bool) override as bool
	func acceptVisitor(visitor as sling.common.NodeVisitor) override as bool
	func destroy override
	func setLeft(v as sling.model.ExpressionNode, doExport as bool = false)
	func getLeft as sling.model.ExpressionNode
	func exportLeft as sling.model.ExpressionNode
	func setRight(v as sling.model.ExpressionNode, doExport as bool = false)
	func getRight as sling.model.ExpressionNode
	func exportRight as sling.model.ExpressionNode
}
class name sling.model.EnumDeclarationNode header extends sling.model.EntityDeclarationNode public
{
	import sling.common
	import jk.lang
	ctor
	func forName(name as string) static as sling.model.EnumDeclarationNode
	func getNodeTypeName override as string
	func createNew override as sling.common.NodeObject
	func copyTo(o as sling.common.NodeObject) override as bool
	func replaceChild(oldnode as sling.common.NodeObject, newnode as sling.common.NodeObject, doExport as bool) override as bool
	func acceptVisitor(visitor as sling.common.NodeVisitor) override as bool
	func destroy override
}
class name sling.model.FlatBlockNode header extends sling.common.ContainerNode public
{
	import sling.common
	import jk.lang
	ctor
	func forStatement(node as sling.common.NodeObject) static as sling.model.FlatBlockNode
	func getNodeTypeName override as string
	func createNew override as sling.common.NodeObject
	func copyTo(o as sling.common.NodeObject) override as bool
	func replaceChild(oldnode as sling.common.NodeObject, newnode as sling.common.NodeObject, doExport as bool) override as bool
	func acceptVisitor(visitor as sling.common.NodeVisitor) override as bool
	func destroy override
}
class name sling.model.EmptyExpressionNode header extends sling.model.ExpressionNode public
{
	import sling.common
	import jk.lang
	ctor
	func getNodeTypeName override as string
	func createNew override as sling.common.NodeObject
	func copyTo(o as sling.common.NodeObject) override as bool
	func replaceChild(oldnode as sling.common.NodeObject, newnode as sling.common.NodeObject, doExport as bool) override as bool
	func acceptVisitor(visitor as sling.common.NodeVisitor) override as bool
	func destroy override
}
class name sling.model.InterfaceDeclarationNode header extends sling.model.GenericCapableEntityDeclarationNode public
{
	import sling.common
	import jk.lang
	ctor
	func forName(name as string) static as sling.model.InterfaceDeclarationNode
	func getNodeTypeName override as string
	func createNew override as sling.common.NodeObject
	func copyTo(o as sling.common.NodeObject) override as bool
	func replaceChild(oldnode as sling.common.NodeObject, newnode as sling.common.NodeObject, doExport as bool) override as bool
	func acceptVisitor(visitor as sling.common.NodeVisitor) override as bool
	func destroy override
}
class name sling.model.StrictNotEqualsExpressionNode header extends sling.model.EqualityComparisonExpressionNode public
{
	import sling.common
	import jk.lang
	ctor
	func instance(left as sling.model.ExpressionNode, right as sling.model.ExpressionNode) static as sling.model.StrictNotEqualsExpressionNode
	func getNodeTypeName override as string
	func createNew override as sling.common.NodeObject
	func copyTo(o as sling.common.NodeObject) override as bool
	func replaceChild(oldnode as sling.common.NodeObject, newnode as sling.common.NodeObject, doExport as bool) override as bool
	func acceptVisitor(visitor as sling.common.NodeVisitor) override as bool
	func destroy override
}
class name sling.model.UnaryExpressionNode header extends sling.model.ExpressionNode abstract public
{
	import sling.common
	import jk.lang
	ctor
	func getNodeTypeName override as string
	func copyTo(o as sling.common.NodeObject) override as bool
	func replaceChild(oldnode as sling.common.NodeObject, newnode as sling.common.NodeObject, doExport as bool) override as bool
	func acceptVisitor(visitor as sling.common.NodeVisitor) override as bool
	func destroy override
	func setExpression(v as sling.model.ExpressionNode, doExport as bool = false)
	func getExpression as sling.model.ExpressionNode
	func exportExpression as sling.model.ExpressionNode
}
class name sling.model.DoubleDataTypeNode header extends sling.model.PrimitiveDataTypeNode public
{
	import sling.common
	import jk.lang
	ctor
	func getNodeTypeName override as string
	func createNew override as sling.common.NodeObject
	func copyTo(o as sling.common.NodeObject) override as bool
	func replaceChild(oldnode as sling.common.NodeObject, newnode as sling.common.NodeObject, doExport as bool) override as bool
	func acceptVisitor(visitor as sling.common.NodeVisitor) override as bool
	func destroy override
}
class name sling.model.CaseNotEqualsBlockNode header extends sling.model.CaseBlockNode public
{
	import sling.common
	import jk.lang
	ctor
	func instance(xp as sling.model.ExpressionNode, bb as sling.model.BlockNode) static as sling.model.CaseNotEqualsBlockNode
	func getNodeTypeName override as string
	func createNew override as sling.common.NodeObject
	func copyTo(o as sling.common.NodeObject) override as bool
	func replaceChild(oldnode as sling.common.NodeObject, newnode as sling.common.NodeObject, doExport as bool) override as bool
	func acceptVisitor(visitor as sling.common.NodeVisitor) override as bool
	func destroy override
	func setExpression(v as sling.model.ExpressionNode, doExport as bool = false)
	func getExpression as sling.model.ExpressionNode
	func exportExpression as sling.model.ExpressionNode
}
class name sling.model.TemplateDeclarationNode header extends sling.model.ClassDeclarationNode public
{
	import sling.common
	import jk.lang
	ctor
	func forName(name as string) static as sling.model.TemplateDeclarationNode
	var TYPE_ANY const public static as int
	var TYPE_VALUE const public static as int
	var TYPE_CLASS const public static as int
	func getNodeTypeName override as string
	func createNew override as sling.common.NodeObject
	func copyTo(o as sling.common.NodeObject) override as bool
	func replaceChild(oldnode as sling.common.NodeObject, newnode as sling.common.NodeObject, doExport as bool) override as bool
	func acceptVisitor(visitor as sling.common.NodeVisitor) override as bool
	func destroy override
	func setType(v as int)
	func getType as int
}
class name sling.model.IfStatementNode header extends sling.common.NodeObject public
{
	import sling.common
	import jk.lang
	ctor
	func instance(condition as sling.model.ExpressionNode, ifBlock as sling.model.BlockNode = null, elseBlock as sling.model.BlockNode = null) static as sling.model.IfStatementNode
	func forStatement(condition as sling.model.ExpressionNode, statement as sling.common.NodeObject) static as sling.model.IfStatementNode
	func getNodeTypeName override as string
	func createNew override as sling.common.NodeObject
	func copyTo(o as sling.common.NodeObject) override as bool
	func replaceChild(oldnode as sling.common.NodeObject, newnode as sling.common.NodeObject, doExport as bool) override as bool
	func acceptVisitor(visitor as sling.common.NodeVisitor) override as bool
	func destroy override
	func setCondition(v as sling.model.ExpressionNode, doExport as bool = false)
	func getCondition as sling.model.ExpressionNode
	func exportCondition as sling.model.ExpressionNode
	func setIfBlock(v as sling.model.BlockNode, doExport as bool = false)
	func getIfBlock as sling.model.BlockNode
	func exportIfBlock as sling.model.BlockNode
	func setElseBlock(v as sling.model.BlockNode, doExport as bool = false)
	func getElseBlock as sling.model.BlockNode
	func exportElseBlock as sling.model.BlockNode
	func setElseBlockComment(v as sling.model.CommentNode, doExport as bool = false)
	func getElseBlockComment as sling.model.CommentNode
	func exportElseBlockComment as sling.model.CommentNode
}
class name sling.model.SubtractionExpressionNode header extends sling.model.ArithmeticExpressionNode public
{
	import sling.common
	import jk.lang
	ctor
	func instance(left as sling.model.ExpressionNode, right as sling.model.ExpressionNode) static as sling.model.SubtractionExpressionNode
	func getNodeTypeName override as string
	func createNew override as sling.common.NodeObject
	func copyTo(o as sling.common.NodeObject) override as bool
	func replaceChild(oldnode as sling.common.NodeObject, newnode as sling.common.NodeObject, doExport as bool) override as bool
	func acceptVisitor(visitor as sling.common.NodeVisitor) override as bool
	func destroy override
}
class name sling.model.DynamicXorExpressionNode header extends sling.model.BinaryExpressionNode public
{
	import sling.common
	import jk.lang
	ctor
	func instance(left as sling.model.ExpressionNode, right as sling.model.ExpressionNode) static as sling.model.DynamicXorExpressionNode
	func getNodeTypeName override as string
	func createNew override as sling.common.NodeObject
	func copyTo(o as sling.common.NodeObject) override as bool
	func replaceChild(oldnode as sling.common.NodeObject, newnode as sling.common.NodeObject, doExport as bool) override as bool
	func acceptVisitor(visitor as sling.common.NodeVisitor) override as bool
	func destroy override
}
class name sling.model.PreDecrementExpressionNode header extends sling.model.UnaryExpressionNode public
{
	import sling.common
	import jk.lang
	ctor
	func forExpression(expression as sling.model.ExpressionNode) static as sling.model.PreDecrementExpressionNode
	func getNodeTypeName override as string
	func createNew override as sling.common.NodeObject
	func copyTo(o as sling.common.NodeObject) override as bool
	func replaceChild(oldnode as sling.common.NodeObject, newnode as sling.common.NodeObject, doExport as bool) override as bool
	func acceptVisitor(visitor as sling.common.NodeVisitor) override as bool
	func destroy override
}
class name sling.model.EmbedBlockNode header extends sling.model.ExpressionNode public
{
	import sling.common
	import jk.lang
	ctor
	func instance(type as string, code as string) static as sling.model.EmbedBlockNode
	func getNodeTypeName override as string
	func createNew override as sling.common.NodeObject
	func copyTo(o as sling.common.NodeObject) override as bool
	func replaceChild(oldnode as sling.common.NodeObject, newnode as sling.common.NodeObject, doExport as bool) override as bool
	func acceptVisitor(visitor as sling.common.NodeVisitor) override as bool
	func destroy override
	func setType(v as string)
	func getType as string
	func setCode(v as string)
	func getCode as string
}
class name sling.model.AssignmentExpressionBaseNode header extends sling.model.BinaryExpressionNode public
{
	import sling.common
	import jk.lang
	ctor
	func getNodeTypeName override as string
	func createNew override as sling.common.NodeObject
	func copyTo(o as sling.common.NodeObject) override as bool
	func replaceChild(oldnode as sling.common.NodeObject, newnode as sling.common.NodeObject, doExport as bool) override as bool
	func acceptVisitor(visitor as sling.common.NodeVisitor) override as bool
	func destroy override
}
class name sling.model.ComparisonExpressionNode header extends sling.model.BinaryExpressionNode public
{
	import sling.common
	import jk.lang
	ctor
	func getNodeTypeName override as string
	func createNew override as sling.common.NodeObject
	func copyTo(o as sling.common.NodeObject) override as bool
	func replaceChild(oldnode as sling.common.NodeObject, newnode as sling.common.NodeObject, doExport as bool) override as bool
	func acceptVisitor(visitor as sling.common.NodeVisitor) override as bool
	func destroy override
}
class name sling.model.GenericCapableEntityDeclarationNode header extends sling.model.EntityDeclarationNode public
{
	import sling.common
	import jk.lang
	ctor
	func getNodeTypeName override as string
	func createNew override as sling.common.NodeObject
	func copyTo(o as sling.common.NodeObject) override as bool
	func replaceChild(oldnode as sling.common.NodeObject, newnode as sling.common.NodeObject, doExport as bool) override as bool
	func acceptVisitor(visitor as sling.common.NodeVisitor) override as bool
	func destroy override
	func setGenericTypes(v as vector, doExport as bool = false)
	func getGenericTypes as vector
	func exportGenericTypes as vector
	func addToGenericTypes(v as sling.model.TemplateDeclarationNode)
	func clearGenericTypes
}
class name sling.model.ReferenceDataTypeNode header extends sling.common.DataTypeNode public
{
	import sling.common
	import jk.lang
	ctor
	func forNode(node as sling.common.NodeObject, typemap as sling.model.TypeMap = null) static as sling.model.ReferenceDataTypeNode
	func forName(vv as string) static as sling.model.ReferenceDataTypeNode
	func forVectorOfNames(nn as vector) static as sling.model.ReferenceDataTypeNode
	func forArrayOfNames(nn as array) static as sling.model.ReferenceDataTypeNode
	func forSymbol(sym as sling.model.SymbolNode) static as sling.model.ReferenceDataTypeNode
	func setName(name as string)
	func setNames(nss as vector)
	func getNodeTypeName override as string
	func createNew override as sling.common.NodeObject
	func copyTo(o as sling.common.NodeObject) override as bool
	func replaceChild(oldnode as sling.common.NodeObject, newnode as sling.common.NodeObject, doExport as bool) override as bool
	func acceptVisitor(visitor as sling.common.NodeVisitor) override as bool
	func destroy override
	func setSymbol(v as sling.model.SymbolNode, doExport as bool = false)
	func getSymbol as sling.model.SymbolNode
	func exportSymbol as sling.model.SymbolNode
	func setMagical(v as bool)
	func getMagical as bool
}
class name sling.model.CharacterLiteralExpressionNode header extends sling.model.LiteralExpressionNode public
{
	import sling.common
	import jk.lang
	func forValue(value as char) static as sling.model.CharacterLiteralExpressionNode
	ctor
	func getNodeTypeName override as string
	func createNew override as sling.common.NodeObject
	func copyTo(o as sling.common.NodeObject) override as bool
	func replaceChild(oldnode as sling.common.NodeObject, newnode as sling.common.NodeObject, doExport as bool) override as bool
	func acceptVisitor(visitor as sling.common.NodeVisitor) override as bool
	func destroy override
	func setValue(v as char)
	func getValue as char
}
class name sling.model.LogicalExpressionNode header extends sling.model.BinaryExpressionNode public
{
	import sling.common
	import jk.lang
	ctor
	func getNodeTypeName override as string
	func createNew override as sling.common.NodeObject
	func copyTo(o as sling.common.NodeObject) override as bool
	func replaceChild(oldnode as sling.common.NodeObject, newnode as sling.common.NodeObject, doExport as bool) override as bool
	func acceptVisitor(visitor as sling.common.NodeVisitor) override as bool
	func destroy override
}
class name sling.model.DivisionAssignmentExpressionNode header extends sling.model.AssignmentExpressionBaseNode public
{
	import sling.common
	import jk.lang
	ctor
	func instance(left as sling.model.ExpressionNode, right as sling.model.ExpressionNode) static as sling.model.DivisionAssignmentExpressionNode
	func getNodeTypeName override as string
	func createNew override as sling.common.NodeObject
	func copyTo(o as sling.common.NodeObject) override as bool
	func replaceChild(oldnode as sling.common.NodeObject, newnode as sling.common.NodeObject, doExport as bool) override as bool
	func acceptVisitor(visitor as sling.common.NodeVisitor) override as bool
	func destroy override
}
class name sling.model.PositiveNumberExpressionNode header extends sling.model.UnaryExpressionNode public
{
	import sling.common
	import jk.lang
	ctor
	func forExpression(expression as sling.model.ExpressionNode) static as sling.model.PositiveNumberExpressionNode
	func getNodeTypeName override as string
	func createNew override as sling.common.NodeObject
	func copyTo(o as sling.common.NodeObject) override as bool
	func replaceChild(oldnode as sling.common.NodeObject, newnode as sling.common.NodeObject, doExport as bool) override as bool
	func acceptVisitor(visitor as sling.common.NodeVisitor) override as bool
	func destroy override
}
class name sling.model.PrintStatementNode header extends sling.common.NodeObject public
{
	import sling.common
	import jk.lang
	ctor
	func forExpression(expression as sling.model.ExpressionNode) static as sling.model.PrintStatementNode
	func getNodeTypeName override as string
	func createNew override as sling.common.NodeObject
	func copyTo(o as sling.common.NodeObject) override as bool
	func replaceChild(oldnode as sling.common.NodeObject, newnode as sling.common.NodeObject, doExport as bool) override as bool
	func acceptVisitor(visitor as sling.common.NodeVisitor) override as bool
	func destroy override
	func setExpression(v as sling.model.ExpressionNode, doExport as bool = false)
	func getExpression as sling.model.ExpressionNode
	func exportExpression as sling.model.ExpressionNode
}
class name sling.model.GetSizeExpressionNode header extends sling.model.UnaryExpressionNode public
{
	import sling.common
	import jk.lang
	ctor
	func forExpression(expression as sling.model.ExpressionNode) static as sling.model.GetSizeExpressionNode
	func getNodeTypeName override as string
	func createNew override as sling.common.NodeObject
	func copyTo(o as sling.common.NodeObject) override as bool
	func replaceChild(oldnode as sling.common.NodeObject, newnode as sling.common.NodeObject, doExport as bool) override as bool
	func acceptVisitor(visitor as sling.common.NodeVisitor) override as bool
	func destroy override
}
class name sling.model.EqualityComparisonExpressionNode header extends sling.model.ComparisonExpressionNode abstract public
{
	import sling.common
	import jk.lang
	ctor
	var SEMANTICS_CLASSIC const public static as int
	var SEMANTICS_COERCED const public static as int
	var SEMANTICS_IDENTITY const public static as int
	var SEMANTICS_VALUE const public static as int
	var SEMANTICS_OBJECT const public static as int
	func getNodeTypeName override as string
	func copyTo(o as sling.common.NodeObject) override as bool
	func replaceChild(oldnode as sling.common.NodeObject, newnode as sling.common.NodeObject, doExport as bool) override as bool
	func acceptVisitor(visitor as sling.common.NodeVisitor) override as bool
	func destroy override
	func setSemantics(v as int)
	func getSemantics as int
}
class name sling.model.DataTypeExtenderNode header extends sling.common.DataTypeNode public
{
	import sling.common
	import jk.lang
	ctor
	func getNodeTypeName override as string
	func createNew override as sling.common.NodeObject
	func copyTo(o as sling.common.NodeObject) override as bool
	func replaceChild(oldnode as sling.common.NodeObject, newnode as sling.common.NodeObject, doExport as bool) override as bool
	func acceptVisitor(visitor as sling.common.NodeVisitor) override as bool
	func destroy override
	func setPrimaryType(v as sling.common.DataTypeNode, doExport as bool = false)
	func getPrimaryType as sling.common.DataTypeNode
	func exportPrimaryType as sling.common.DataTypeNode
}
class name sling.model.AssertStatementNode header extends sling.common.NodeObject public
{
	import sling.common
	import jk.lang
	ctor
	var STYLE_RETURN const public static as int
	var STYLE_THROW const public static as int
	func forChild(xpr as sling.common.NodeObject) static as sling.model.AssertStatementNode
	func getNodeTypeName override as string
	func createNew override as sling.common.NodeObject
	func copyTo(o as sling.common.NodeObject) override as bool
	func replaceChild(oldnode as sling.common.NodeObject, newnode as sling.common.NodeObject, doExport as bool) override as bool
	func acceptVisitor(visitor as sling.common.NodeVisitor) override as bool
	func destroy override
	func setChild(v as sling.common.NodeObject, doExport as bool = false)
	func getChild as sling.common.NodeObject
	func exportChild as sling.common.NodeObject
	func setErrorBlock(v as sling.model.BlockNode, doExport as bool = false)
	func getErrorBlock as sling.model.BlockNode
	func exportErrorBlock as sling.model.BlockNode
	func setErrorMessage(v as sling.model.ExpressionNode, doExport as bool = false)
	func getErrorMessage as sling.model.ExpressionNode
	func exportErrorMessage as sling.model.ExpressionNode
	func setStyle(v as int)
	func getStyle as int
}
class name sling.model.EnumValueNode header extends sling.model.NodeObjectWithModifiers implements sling.common.NamedNode public
{
	import sling.common
	import jk.lang
	ctor
	func getNodeName as string
	func renameNode(name as string)
	func setName(name as string)
	func getNodeTypeName override as string
	func createNew override as sling.common.NodeObject
	func copyTo(o as sling.common.NodeObject) override as bool
	func replaceChild(oldnode as sling.common.NodeObject, newnode as sling.common.NodeObject, doExport as bool) override as bool
	func acceptVisitor(visitor as sling.common.NodeVisitor) override as bool
	func destroy override
	func setType(v as sling.common.DataTypeNode, doExport as bool = false)
	func getType as sling.common.DataTypeNode
	func exportType as sling.common.DataTypeNode
	func setValue(v as sling.model.ExpressionNode, doExport as bool = false)
	func getValue as sling.model.ExpressionNode
	func exportValue as sling.model.ExpressionNode
	func getName as string
}
class name sling.model.NamedParameterExpressionNode header extends sling.model.ExpressionNode public
{
	import sling.common
	import jk.lang
	ctor
	func getNodeTypeName override as string
	func createNew override as sling.common.NodeObject
	func copyTo(o as sling.common.NodeObject) override as bool
	func replaceChild(oldnode as sling.common.NodeObject, newnode as sling.common.NodeObject, doExport as bool) override as bool
	func acceptVisitor(visitor as sling.common.NodeVisitor) override as bool
	func destroy override
	func setValue(v as sling.model.ExpressionNode, doExport as bool = false)
	func getValue as sling.model.ExpressionNode
	func exportValue as sling.model.ExpressionNode
	func setName(v as string)
	func getName as string
}
class name sling.model.TupleExpressionNode header extends sling.model.ExpressionNode public
{
	import sling.common
	import jk.lang
	ctor
	func getNodeTypeName override as string
	func createNew override as sling.common.NodeObject
	func copyTo(o as sling.common.NodeObject) override as bool
	func replaceChild(oldnode as sling.common.NodeObject, newnode as sling.common.NodeObject, doExport as bool) override as bool
	func acceptVisitor(visitor as sling.common.NodeVisitor) override as bool
	func destroy override
	func setExpressions(v as vector, doExport as bool = false)
	func getExpressions as vector
	func exportExpressions as vector
	func addToExpressions(v as sling.model.ExpressionNode)
	func clearExpressions
}
class name sling.model.SymbolExpressionNode header extends sling.model.ExpressionNode public
{
	import sling.common
	import jk.lang
	ctor
	func forSymbol(symbol as sling.model.SymbolNode) static as sling.model.SymbolExpressionNode
	func forBinding(binding as sling.common.NodeObject, typemap as sling.model.TypeMap = null) static as sling.model.SymbolExpressionNode
	func forNameWithTypeParameters(name as string, typeParameters as vector) static as sling.model.SymbolExpressionNode
	func forName(name as string) static as sling.model.SymbolExpressionNode
	func forBoundName(name as string, binding as sling.common.NodeObject, typemap as sling.model.TypeMap) static as sling.model.SymbolExpressionNode
	func forArrayOfNames(names as array) static as sling.model.SymbolExpressionNode
	func forVectorOfNames(names as vector) static as sling.model.SymbolExpressionNode
	func getNodeTypeName override as string
	func createNew override as sling.common.NodeObject
	func copyTo(o as sling.common.NodeObject) override as bool
	func replaceChild(oldnode as sling.common.NodeObject, newnode as sling.common.NodeObject, doExport as bool) override as bool
	func acceptVisitor(visitor as sling.common.NodeVisitor) override as bool
	func destroy override
	func setSymbol(v as sling.model.SymbolNode, doExport as bool = false)
	func getSymbol as sling.model.SymbolNode
	func exportSymbol as sling.model.SymbolNode
}
class name sling.model.PropertySetFunctionDeclarationNode header extends sling.model.FunctionDeclarationBaseNode public
{
	import sling.common
	import jk.lang
	ctor
	func setParameter(dt as sling.common.DataTypeNode, name as string)
	func getNodeTypeName override as string
	func createNew override as sling.common.NodeObject
	func copyTo(o as sling.common.NodeObject) override as bool
	func replaceChild(oldnode as sling.common.NodeObject, newnode as sling.common.NodeObject, doExport as bool) override as bool
	func acceptVisitor(visitor as sling.common.NodeVisitor) override as bool
	func destroy override
}
class name sling.model.CharacterDataTypeNode header extends sling.model.PrimitiveDataTypeNode public
{
	import sling.common
	import jk.lang
	ctor
	func getNodeTypeName override as string
	func createNew override as sling.common.NodeObject
	func copyTo(o as sling.common.NodeObject) override as bool
	func replaceChild(oldnode as sling.common.NodeObject, newnode as sling.common.NodeObject, doExport as bool) override as bool
	func acceptVisitor(visitor as sling.common.NodeVisitor) override as bool
	func destroy override
}
class name sling.model.ScriptDeclarationNode header extends sling.model.EntityDeclarationNode public
{
	import sling.common
	import jk.lang
	ctor
	func forName(name as string) static as sling.model.ScriptDeclarationNode
	func getNodeTypeName override as string
	func createNew override as sling.common.NodeObject
	func copyTo(o as sling.common.NodeObject) override as bool
	func replaceChild(oldnode as sling.common.NodeObject, newnode as sling.common.NodeObject, doExport as bool) override as bool
	func acceptVisitor(visitor as sling.common.NodeVisitor) override as bool
	func destroy override
}
class name sling.model.CriticalSectionBlockNode header extends sling.common.NodeObject public
{
	import sling.common
	import jk.lang
	ctor
	func instance(object as sling.model.ExpressionNode, block as sling.model.BlockNode) static as sling.model.CriticalSectionBlockNode
	func getNodeTypeName override as string
	func createNew override as sling.common.NodeObject
	func copyTo(o as sling.common.NodeObject) override as bool
	func replaceChild(oldnode as sling.common.NodeObject, newnode as sling.common.NodeObject, doExport as bool) override as bool
	func acceptVisitor(visitor as sling.common.NodeVisitor) override as bool
	func destroy override
	func setObject(v as sling.model.ExpressionNode, doExport as bool = false)
	func getObject as sling.model.ExpressionNode
	func exportObject as sling.model.ExpressionNode
	func setBlock(v as sling.model.BlockNode, doExport as bool = false)
	func getBlock as sling.model.BlockNode
	func exportBlock as sling.model.BlockNode
}
class name sling.model.TypeInfoDataTypeNode header extends sling.common.DataTypeNode public
{
	import sling.common
	import jk.lang
	ctor
	func getNodeTypeName override as string
	func createNew override as sling.common.NodeObject
	func copyTo(o as sling.common.NodeObject) override as bool
	func replaceChild(oldnode as sling.common.NodeObject, newnode as sling.common.NodeObject, doExport as bool) override as bool
	func acceptVisitor(visitor as sling.common.NodeVisitor) override as bool
	func destroy override
}
class name sling.model.FunctionDeclarationNode header extends sling.model.FunctionDeclarationBaseNode implements sling.common.NamedNode public
{
	import sling.common
	import jk.lang
	ctor
	func forName(name as string, isPublic as bool = false) static as sling.model.FunctionDeclarationNode
	func getBaseClassDeclaration as sling.model.FunctionDeclarationNode
	func setBaseClassDeclaration(v as sling.model.FunctionDeclarationNode, typemap as sling.model.TypeMap)
	func getOverridingDeclarations as vector<sling.model.FunctionDeclarationNode>
	func setOverridingDeclarations(decls as vector<sling.model.FunctionDeclarationNode>)
	func addToOverridingDeclarations(decl as sling.model.FunctionDeclarationNode)
	func getImplementedDeclarations as vector<sling.model.FunctionDeclarationNode>
	func setImplementedDeclarations(decls as vector<sling.model.FunctionDeclarationNode>)
	func addToImplementedDeclarations(decl as sling.model.FunctionDeclarationNode)
	func getReturnType as sling.common.DataTypeNode
	func getReturnTypeQualifiedNameString(baseReturnType as sling.common.DataTypeNode) as string
	func getOwnReturnType as sling.common.DataTypeNode
	func dupDeclaration as sling.model.FunctionDeclarationNode
	func getNodeName as string
	func renameNode(name as string)
	func setName(name as string)
	func getNodeTypeName override as string
	func createNew override as sling.common.NodeObject
	func copyTo(o as sling.common.NodeObject) override as bool
	func replaceChild(oldnode as sling.common.NodeObject, newnode as sling.common.NodeObject, doExport as bool) override as bool
	func acceptVisitor(visitor as sling.common.NodeVisitor) override as bool
	func destroy override
	func setReturnType(v as sling.common.DataTypeNode, doExport as bool = false)
	func exportReturnType as sling.common.DataTypeNode
	func getName as string
}
class name sling.model.FailureLiteralExpressionNode header extends sling.model.LiteralExpressionNode public
{
	import sling.common
	import jk.lang
	ctor
	func getNodeTypeName override as string
	func createNew override as sling.common.NodeObject
	func copyTo(o as sling.common.NodeObject) override as bool
	func replaceChild(oldnode as sling.common.NodeObject, newnode as sling.common.NodeObject, doExport as bool) override as bool
	func acceptVisitor(visitor as sling.common.NodeVisitor) override as bool
	func destroy override
}
class name sling.model.ExpressionNode header extends sling.common.NodeObject public
{
	import sling.common
	import jk.lang
	ctor
	func getNodeTypeName override as string
	func createNew override as sling.common.NodeObject
	func copyTo(o as sling.common.NodeObject) override as bool
	func replaceChild(oldnode as sling.common.NodeObject, newnode as sling.common.NodeObject, doExport as bool) override as bool
	func acceptVisitor(visitor as sling.common.NodeVisitor) override as bool
	func destroy override
	func setDefaultDataType(v as sling.common.DataTypeNode, doExport as bool = false)
	func getDefaultDataType as sling.common.DataTypeNode
	func exportDefaultDataType as sling.common.DataTypeNode
	func setResolvedDataType(v as sling.common.DataTypeNode, doExport as bool = false)
	func getResolvedDataType as sling.common.DataTypeNode
	func exportResolvedDataType as sling.common.DataTypeNode
}
class name sling.model.ParentDataTypeNode header extends sling.model.ReferenceDataTypeNode public
{
	import sling.common
	import jk.lang
	ctor
	func getNodeTypeName override as string
	func createNew override as sling.common.NodeObject
	func copyTo(o as sling.common.NodeObject) override as bool
	func replaceChild(oldnode as sling.common.NodeObject, newnode as sling.common.NodeObject, doExport as bool) override as bool
	func acceptVisitor(visitor as sling.common.NodeVisitor) override as bool
	func destroy override
}
class name sling.model.FloatLiteralExpressionNode header extends sling.model.LiteralExpressionNode public
{
	import sling.common
	import jk.lang
	func forValue(value as float) static as sling.model.FloatLiteralExpressionNode
	var FORMAT_DECIMAL const public static as int
	var FORMAT_HEXADECIMAL const public static as int
	ctor
	func getNodeTypeName override as string
	func createNew override as sling.common.NodeObject
	func copyTo(o as sling.common.NodeObject) override as bool
	func replaceChild(oldnode as sling.common.NodeObject, newnode as sling.common.NodeObject, doExport as bool) override as bool
	func acceptVisitor(visitor as sling.common.NodeVisitor) override as bool
	func destroy override
	func setValue(v as float)
	func getValue as float
	func setFormat(v as int)
	func getFormat as int
}
class name sling.model.LessThanExpressionNode header extends sling.model.ComparisonExpressionNode public
{
	import sling.common
	import jk.lang
	ctor
	func instance(left as sling.model.ExpressionNode, right as sling.model.ExpressionNode) static as sling.model.LessThanExpressionNode
	func getNodeTypeName override as string
	func createNew override as sling.common.NodeObject
	func copyTo(o as sling.common.NodeObject) override as bool
	func replaceChild(oldnode as sling.common.NodeObject, newnode as sling.common.NodeObject, doExport as bool) override as bool
	func acceptVisitor(visitor as sling.common.NodeVisitor) override as bool
	func destroy override
}
class name sling.model.ForEachStatementNode header extends sling.model.StatementNode implements sling.model.LoopStatementNode public
{
	import sling.common
	import jk.lang
	ctor
	func instance(left as sling.common.NodeObject, right as sling.model.ExpressionNode, block as sling.model.BlockNode, elseBlock as sling.model.BlockNode = null) static as sling.model.ForEachStatementNode
	func getLeft as sling.common.NodeObject
	func getLeftCount as int
	func setLeft(value as sling.common.NodeObject) as sling.model.ForEachStatementNode
	func exportLeft as sling.common.NodeObject
	func getNodeTypeName override as string
	func createNew override as sling.common.NodeObject
	func copyTo(o as sling.common.NodeObject) override as bool
	func replaceChild(oldnode as sling.common.NodeObject, newnode as sling.common.NodeObject, doExport as bool) override as bool
	func acceptVisitor(visitor as sling.common.NodeVisitor) override as bool
	func destroy override
	func setRight(v as sling.model.ExpressionNode, doExport as bool = false)
	func getRight as sling.model.ExpressionNode
	func exportRight as sling.model.ExpressionNode
	func setBlock(v as sling.model.BlockNode, doExport as bool = false)
	func getBlock as sling.model.BlockNode
	func exportBlock as sling.model.BlockNode
	func setCondition(v as sling.model.ExpressionNode, doExport as bool = false)
	func getCondition as sling.model.ExpressionNode
	func exportCondition as sling.model.ExpressionNode
	func setElseBlock(v as sling.model.BlockNode, doExport as bool = false)
	func getElseBlock as sling.model.BlockNode
	func exportElseBlock as sling.model.BlockNode
	func setDefaultDataType(v as sling.common.DataTypeNode, doExport as bool = false)
	func getDefaultDataType as sling.common.DataTypeNode
	func exportDefaultDataType as sling.common.DataTypeNode
	func setIterateKeys(v as bool)
	func getIterateKeys as bool
	func setLefts(v as vector, doExport as bool = false)
	func getLefts as vector
	func exportLefts as vector
	func addToLefts(v as sling.common.NodeObject)
	func clearLefts
}
class name sling.model.FunctionCallExpressionNode header extends sling.model.ExpressionNode public
{
	import sling.common
	import jk.lang
	ctor
	func forName(name as string) static as sling.model.FunctionCallExpressionNode
	func forNameWithParams(name as string, params as array<sling.model.ExpressionNode>) static as sling.model.FunctionCallExpressionNode
	func forExpression(expr as sling.model.ExpressionNode) static as sling.model.FunctionCallExpressionNode
	func forMethod(parent as sling.model.ExpressionNode, methodName as string, isStatic as bool = false) static as sling.model.FunctionCallExpressionNode
	func forNames(names as array) static as sling.model.FunctionCallExpressionNode
	func getParameterCount as int
	func exportOneParameter as sling.model.ExpressionNode
	func setParameter(index as int, node as sling.model.ExpressionNode)
	func addStringToParameters(value as string)
	func addIntegerToParameters(value as int)
	func addDoubleToParameters(value as double)
	func addBooleanToParameters(value as bool)
	func prependParameter(param as sling.model.ExpressionNode)
	func getParameter(n as int) as sling.model.ExpressionNode
	func getNodeTypeName override as string
	func createNew override as sling.common.NodeObject
	func copyTo(o as sling.common.NodeObject) override as bool
	func replaceChild(oldnode as sling.common.NodeObject, newnode as sling.common.NodeObject, doExport as bool) override as bool
	func acceptVisitor(visitor as sling.common.NodeVisitor) override as bool
	func destroy override
	func setExpression(v as sling.model.ExpressionNode, doExport as bool = false)
	func getExpression as sling.model.ExpressionNode
	func exportExpression as sling.model.ExpressionNode
	func setTrailingParameter(v as sling.model.ExpressionNode, doExport as bool = false)
	func getTrailingParameter as sling.model.ExpressionNode
	func exportTrailingParameter as sling.model.ExpressionNode
	func setIsolated(v as bool)
	func getIsolated as bool
	func setParameters(v as vector, doExport as bool = false)
	func getParameters as vector
	func exportParameters as vector
	func addToParameters(v as sling.model.ExpressionNode)
	func clearParameters
}
class name sling.model.ThisDataTypeNode header extends sling.model.ReferenceDataTypeNode public
{
	import sling.common
	import jk.lang
	ctor
	func getNodeTypeName override as string
	func createNew override as sling.common.NodeObject
	func copyTo(o as sling.common.NodeObject) override as bool
	func replaceChild(oldnode as sling.common.NodeObject, newnode as sling.common.NodeObject, doExport as bool) override as bool
	func acceptVisitor(visitor as sling.common.NodeVisitor) override as bool
	func destroy override
}
class name sling.model.BreakLabelStatementNode header extends sling.model.LabeledControlStatementNode public
{
	import sling.common
	import jk.lang
	ctor
	func forLabel(label as string) static as sling.model.BreakLabelStatementNode
	func getNodeTypeName override as string
	func createNew override as sling.common.NodeObject
	func copyTo(o as sling.common.NodeObject) override as bool
	func replaceChild(oldnode as sling.common.NodeObject, newnode as sling.common.NodeObject, doExport as bool) override as bool
	func acceptVisitor(visitor as sling.common.NodeVisitor) override as bool
	func destroy override
}
class name sling.model.ForStatementNode header extends sling.model.StatementNode implements sling.model.LoopStatementNode public
{
	import sling.common
	import jk.lang
	ctor
	func instance(initializer as sling.model.FlatBlockNode, condition as sling.model.ExpressionNode, finalizer as sling.model.FlatBlockNode, block as sling.model.BlockNode) static as sling.model.ForStatementNode
	func addInitializer(node as sling.common.NodeObject) as sling.model.ForStatementNode
	func addFinalizer(node as sling.common.NodeObject) as sling.model.ForStatementNode
	func getNodeTypeName override as string
	func createNew override as sling.common.NodeObject
	func copyTo(o as sling.common.NodeObject) override as bool
	func replaceChild(oldnode as sling.common.NodeObject, newnode as sling.common.NodeObject, doExport as bool) override as bool
	func acceptVisitor(visitor as sling.common.NodeVisitor) override as bool
	func destroy override
	func setInitializer(v as sling.model.FlatBlockNode, doExport as bool = false)
	func getInitializer as sling.model.FlatBlockNode
	func exportInitializer as sling.model.FlatBlockNode
	func setCondition(v as sling.model.ExpressionNode, doExport as bool = false)
	func getCondition as sling.model.ExpressionNode
	func exportCondition as sling.model.ExpressionNode
	func setFinalizer(v as sling.model.FlatBlockNode, doExport as bool = false)
	func getFinalizer as sling.model.FlatBlockNode
	func exportFinalizer as sling.model.FlatBlockNode
	func setBlock(v as sling.model.BlockNode, doExport as bool = false)
	func getBlock as sling.model.BlockNode
	func exportBlock as sling.model.BlockNode
}
class name sling.model.StyleSheetDataTypeNode header extends sling.common.DataTypeNode public
{
	import sling.common
	import jk.lang
	ctor
	func getNodeTypeName override as string
	func createNew override as sling.common.NodeObject
	func copyTo(o as sling.common.NodeObject) override as bool
	func replaceChild(oldnode as sling.common.NodeObject, newnode as sling.common.NodeObject, doExport as bool) override as bool
	func acceptVisitor(visitor as sling.common.NodeVisitor) override as bool
	func destroy override
}
class name sling.model.AwaitExpressionNode header extends sling.model.UnaryExpressionNode public
{
	import sling.common
	import jk.lang
	ctor
	func forExpression(expression as sling.model.ExpressionNode) static as sling.model.AwaitExpressionNode
	func getNodeTypeName override as string
	func createNew override as sling.common.NodeObject
	func copyTo(o as sling.common.NodeObject) override as bool
	func replaceChild(oldnode as sling.common.NodeObject, newnode as sling.common.NodeObject, doExport as bool) override as bool
	func acceptVisitor(visitor as sling.common.NodeVisitor) override as bool
	func destroy override
}
class name sling.model.ResourceFileNode header extends sling.common.NodeObject public
{
	import jk.fs
	import sling.common
	import jk.lang
	ctor
	func forFile(file as jk.fs.File) static as sling.model.ResourceFileNode
	func getName as string
	func getNameWithoutExtension as string
	func getPath as string
	func getNodeTypeName override as string
	func createNew override as sling.common.NodeObject
	func copyTo(o as sling.common.NodeObject) override as bool
	func replaceChild(oldnode as sling.common.NodeObject, newnode as sling.common.NodeObject, doExport as bool) override as bool
	func acceptVisitor(visitor as sling.common.NodeVisitor) override as bool
	func destroy override
	func setFile(v as jk.fs.File)
	func getFile as jk.fs.File
	func setBuffer(v as buffer)
	func getBuffer as buffer
	func setFileName(v as string)
	func getFileName as string
	func setCondition(v as string)
	func getCondition as string
}
class name sling.model.GreaterOrEqualExpressionNode header extends sling.model.ComparisonExpressionNode public
{
	import sling.common
	import jk.lang
	ctor
	func instance(left as sling.model.ExpressionNode, right as sling.model.ExpressionNode) static as sling.model.GreaterOrEqualExpressionNode
	func getNodeTypeName override as string
	func createNew override as sling.common.NodeObject
	func copyTo(o as sling.common.NodeObject) override as bool
	func replaceChild(oldnode as sling.common.NodeObject, newnode as sling.common.NodeObject, doExport as bool) override as bool
	func acceptVisitor(visitor as sling.common.NodeVisitor) override as bool
	func destroy override
}
class name sling.model.AllocateBufferExpressionNode header extends sling.model.UnaryExpressionNode public
{
	import sling.common
	import jk.lang
	func forExpression(expression as sling.model.ExpressionNode) static as sling.model.AllocateBufferExpressionNode
	ctor
	func getNodeTypeName override as string
	func createNew override as sling.common.NodeObject
	func copyTo(o as sling.common.NodeObject) override as bool
	func replaceChild(oldnode as sling.common.NodeObject, newnode as sling.common.NodeObject, doExport as bool) override as bool
	func acceptVisitor(visitor as sling.common.NodeVisitor) override as bool
	func destroy override
}
class name sling.model.BooleanLiteralExpressionNode header extends sling.model.LiteralExpressionNode public
{
	import sling.common
	import jk.lang
	func forValue(value as bool) static as sling.model.BooleanLiteralExpressionNode
	ctor
	func getNodeTypeName override as string
	func createNew override as sling.common.NodeObject
	func copyTo(o as sling.common.NodeObject) override as bool
	func replaceChild(oldnode as sling.common.NodeObject, newnode as sling.common.NodeObject, doExport as bool) override as bool
	func acceptVisitor(visitor as sling.common.NodeVisitor) override as bool
	func destroy override
	func setValue(v as bool)
	func getValue as bool
}
class name sling.model.CaseGreaterOrEqualBlockNode header extends sling.model.CaseBlockNode public
{
	import sling.common
	import jk.lang
	ctor
	func instance(xp as sling.model.ExpressionNode, bb as sling.model.BlockNode) static as sling.model.CaseGreaterOrEqualBlockNode
	func getNodeTypeName override as string
	func createNew override as sling.common.NodeObject
	func copyTo(o as sling.common.NodeObject) override as bool
	func replaceChild(oldnode as sling.common.NodeObject, newnode as sling.common.NodeObject, doExport as bool) override as bool
	func acceptVisitor(visitor as sling.common.NodeVisitor) override as bool
	func destroy override
	func setExpression(v as sling.model.ExpressionNode, doExport as bool = false)
	func getExpression as sling.model.ExpressionNode
	func exportExpression as sling.model.ExpressionNode
}
class name sling.model.PropertyInitializeFunctionDeclarationNode header extends sling.model.FunctionDeclarationBaseNode public
{
	import sling.common
	import jk.lang
	ctor
	func getNodeTypeName override as string
	func createNew override as sling.common.NodeObject
	func copyTo(o as sling.common.NodeObject) override as bool
	func replaceChild(oldnode as sling.common.NodeObject, newnode as sling.common.NodeObject, doExport as bool) override as bool
	func acceptVisitor(visitor as sling.common.NodeVisitor) override as bool
	func destroy override
}
class name sling.model.PointerDataTypeNode header extends sling.model.DataTypeExtenderNode public
{
	import sling.common
	import jk.lang
	ctor
	func forPrimaryType(type as sling.common.DataTypeNode) static as sling.model.PointerDataTypeNode
	func getNodeTypeName override as string
	func createNew override as sling.common.NodeObject
	func copyTo(o as sling.common.NodeObject) override as bool
	func replaceChild(oldnode as sling.common.NodeObject, newnode as sling.common.NodeObject, doExport as bool) override as bool
	func acceptVisitor(visitor as sling.common.NodeVisitor) override as bool
	func destroy override
}
class name sling.model.FunctionDataTypeNode header extends sling.common.DataTypeNode public
{
	import sling.common
	import jk.lang
	ctor
	func forFunction(decl as sling.model.FunctionDeclarationNode) static as sling.model.FunctionDataTypeNode
	func getFunctionReturnType as sling.common.DataTypeNode
	func getFunctionParameters as vector
	func getNodeTypeName override as string
	func createNew override as sling.common.NodeObject
	func copyTo(o as sling.common.NodeObject) override as bool
	func replaceChild(oldnode as sling.common.NodeObject, newnode as sling.common.NodeObject, doExport as bool) override as bool
	func acceptVisitor(visitor as sling.common.NodeVisitor) override as bool
	func destroy override
	func setDeclaration(v as sling.model.FunctionDeclarationNode, doExport as bool = false)
	func getDeclaration as sling.model.FunctionDeclarationNode
	func exportDeclaration as sling.model.FunctionDeclarationNode
}
class name sling.model.BooleanDataTypeNode header extends sling.model.PrimitiveDataTypeNode public
{
	import sling.common
	import jk.lang
	ctor
	func getNodeTypeName override as string
	func createNew override as sling.common.NodeObject
	func copyTo(o as sling.common.NodeObject) override as bool
	func replaceChild(oldnode as sling.common.NodeObject, newnode as sling.common.NodeObject, doExport as bool) override as bool
	func acceptVisitor(visitor as sling.common.NodeVisitor) override as bool
	func destroy override
}
class name sling.model.ClassDeclarationNode header extends sling.model.GenericCapableEntityDeclarationNode public
{
	import sling.common
	import jk.lang
	ctor
	func forName(name as string) static as sling.model.ClassDeclarationNode
	func getNodeTypeName override as string
	func createNew override as sling.common.NodeObject
	func copyTo(o as sling.common.NodeObject) override as bool
	func replaceChild(oldnode as sling.common.NodeObject, newnode as sling.common.NodeObject, doExport as bool) override as bool
	func acceptVisitor(visitor as sling.common.NodeVisitor) override as bool
	func destroy override
}
class name sling.model.PromiseDataTypeNode header extends sling.model.DataTypeExtenderNode public
{
	import sling.common
	import jk.lang
	ctor
	func forPrimaryType(type as sling.common.DataTypeNode) static as sling.model.PromiseDataTypeNode
	func getNodeTypeName override as string
	func createNew override as sling.common.NodeObject
	func copyTo(o as sling.common.NodeObject) override as bool
	func replaceChild(oldnode as sling.common.NodeObject, newnode as sling.common.NodeObject, doExport as bool) override as bool
	func acceptVisitor(visitor as sling.common.NodeVisitor) override as bool
	func destroy override
}
class name sling.model.LabeledControlStatementNode header extends sling.common.NodeObject public
{
	import sling.common
	import jk.lang
	ctor
	func getNodeTypeName override as string
	func createNew override as sling.common.NodeObject
	func copyTo(o as sling.common.NodeObject) override as bool
	func replaceChild(oldnode as sling.common.NodeObject, newnode as sling.common.NodeObject, doExport as bool) override as bool
	func acceptVisitor(visitor as sling.common.NodeVisitor) override as bool
	func destroy override
	func setLabel(v as string)
	func getLabel as string
}
class name sling.model.PropertyDeclarationNode header extends sling.model.NodeObjectWithModifiers implements sling.common.NamedNode public
{
	import sling.common
	import jk.lang
	ctor
	func getNodeName as string
	func getName as string
	func renameNode(name as string)
	func addToBody(node as sling.common.NodeObject)
	func getNodeTypeName override as string
	func createNew override as sling.common.NodeObject
	func copyTo(o as sling.common.NodeObject) override as bool
	func replaceChild(oldnode as sling.common.NodeObject, newnode as sling.common.NodeObject, doExport as bool) override as bool
	func acceptVisitor(visitor as sling.common.NodeVisitor) override as bool
	func destroy override
	func setType(v as sling.common.DataTypeNode, doExport as bool = false)
	func getType as sling.common.DataTypeNode
	func exportType as sling.common.DataTypeNode
	func setBody(v as sling.model.BlockNode, doExport as bool = false)
	func getBody as sling.model.BlockNode
	func exportBody as sling.model.BlockNode
	func setInitializer(v as sling.model.ExpressionNode, doExport as bool = false)
	func getInitializer as sling.model.ExpressionNode
	func exportInitializer as sling.model.ExpressionNode
	func setName(v as string)
	func setBackingVariableName(v as string)
	func getBackingVariableName as string
	func setDescription(v as string)
	func getDescription as string
}
class name sling.model.AnnotationModifierNode header extends sling.common.NodeObject public
{
	import sling.common
	import jk.lang
	ctor
	func forText(text as string) static as sling.model.AnnotationModifierNode
	func getNodeTypeName override as string
	func createNew override as sling.common.NodeObject
	func copyTo(o as sling.common.NodeObject) override as bool
	func replaceChild(oldnode as sling.common.NodeObject, newnode as sling.common.NodeObject, doExport as bool) override as bool
	func acceptVisitor(visitor as sling.common.NodeVisitor) override as bool
	func destroy override
	func setSymbol(v as sling.model.SymbolNode, doExport as bool = false)
	func getSymbol as sling.model.SymbolNode
	func exportSymbol as sling.model.SymbolNode
	func setText(v as string)
	func getText as string
	func setExpressions(v as vector, doExport as bool = false)
	func getExpressions as vector
	func exportExpressions as vector
	func addToExpressions(v as sling.model.ExpressionNode)
	func clearExpressions
}
class name sling.model.PreprocessorValueExpressionNode header extends sling.model.ExpressionNode public
{
	import sling.common
	import jk.lang
	ctor
	func forVariable(value as string) static as sling.model.PreprocessorValueExpressionNode
	func getNodeTypeName override as string
	func createNew override as sling.common.NodeObject
	func copyTo(o as sling.common.NodeObject) override as bool
	func replaceChild(oldnode as sling.common.NodeObject, newnode as sling.common.NodeObject, doExport as bool) override as bool
	func acceptVisitor(visitor as sling.common.NodeVisitor) override as bool
	func destroy override
	func setVariable(v as string)
	func getVariable as string
}
class name sling.model.NegativeNumberExpressionNode header extends sling.model.UnaryExpressionNode public
{
	import sling.common
	import jk.lang
	ctor
	func forExpression(expression as sling.model.ExpressionNode) static as sling.model.NegativeNumberExpressionNode
	func getNodeTypeName override as string
	func createNew override as sling.common.NodeObject
	func copyTo(o as sling.common.NodeObject) override as bool
	func replaceChild(oldnode as sling.common.NodeObject, newnode as sling.common.NodeObject, doExport as bool) override as bool
	func acceptVisitor(visitor as sling.common.NodeVisitor) override as bool
	func destroy override
}
class name sling.model.EventAddFunctionDeclarationNode header extends sling.model.FunctionDeclarationBaseNode public
{
	import sling.common
	import jk.lang
	ctor
	func setParameter(dt as sling.common.DataTypeNode, name as string)
	func getNodeTypeName override as string
	func createNew override as sling.common.NodeObject
	func copyTo(o as sling.common.NodeObject) override as bool
	func replaceChild(oldnode as sling.common.NodeObject, newnode as sling.common.NodeObject, doExport as bool) override as bool
	func acceptVisitor(visitor as sling.common.NodeVisitor) override as bool
	func destroy override
}
class name sling.model.FunctionDeclarationExpressionNode header extends sling.model.ExpressionNode public
{
	import sling.common
	import jk.lang
	ctor
	func forDeclaration(decl as sling.model.FunctionDeclarationNode) static as sling.model.FunctionDeclarationExpressionNode
	func getNodeTypeName override as string
	func createNew override as sling.common.NodeObject
	func copyTo(o as sling.common.NodeObject) override as bool
	func replaceChild(oldnode as sling.common.NodeObject, newnode as sling.common.NodeObject, doExport as bool) override as bool
	func acceptVisitor(visitor as sling.common.NodeVisitor) override as bool
	func destroy override
	func setDeclaration(v as sling.model.FunctionDeclarationNode, doExport as bool = false)
	func getDeclaration as sling.model.FunctionDeclarationNode
	func exportDeclaration as sling.model.FunctionDeclarationNode
	func setType(v as sling.common.DataTypeNode, doExport as bool = false)
	func getType as sling.common.DataTypeNode
	func exportType as sling.common.DataTypeNode
	func setReferences(v as vector, doExport as bool = false)
	func getReferences as vector
	func exportReferences as vector
	func addToReferences(v as sling.model.ExpressionNode)
	func clearReferences
}
class name sling.model.TreeExpressionNode header extends sling.model.ExpressionNode public
{
	import sling.common
	import jk.lang
	ctor
	func getNodeTypeName override as string
	func createNew override as sling.common.NodeObject
	func copyTo(o as sling.common.NodeObject) override as bool
	func replaceChild(oldnode as sling.common.NodeObject, newnode as sling.common.NodeObject, doExport as bool) override as bool
	func acceptVisitor(visitor as sling.common.NodeVisitor) override as bool
	func destroy override
	func setRoot(v as sling.model.TreeElementNode, doExport as bool = false)
	func getRoot as sling.model.TreeElementNode
	func exportRoot as sling.model.TreeElementNode
}
class name sling.model.TupleDataTypeNode header extends sling.common.DataTypeNode public
{
	import sling.common
	import jk.lang
	ctor
	func forTypes(types as vector) static as sling.model.TupleDataTypeNode
	func getNodeTypeName override as string
	func createNew override as sling.common.NodeObject
	func copyTo(o as sling.common.NodeObject) override as bool
	func replaceChild(oldnode as sling.common.NodeObject, newnode as sling.common.NodeObject, doExport as bool) override as bool
	func acceptVisitor(visitor as sling.common.NodeVisitor) override as bool
	func destroy override
	func setTypes(v as vector, doExport as bool = false)
	func getTypes as vector
	func exportTypes as vector
	func addToTypes(v as sling.common.DataTypeNode)
	func clearTypes
}
class name sling.model.HandlesModifierNode header extends sling.common.NodeObject public
{
	import sling.common
	import jk.lang
	ctor
	func getNodeTypeName override as string
	func createNew override as sling.common.NodeObject
	func copyTo(o as sling.common.NodeObject) override as bool
	func replaceChild(oldnode as sling.common.NodeObject, newnode as sling.common.NodeObject, doExport as bool) override as bool
	func acceptVisitor(visitor as sling.common.NodeVisitor) override as bool
	func destroy override
	func setSymbol(v as sling.model.SymbolNode, doExport as bool = false)
	func getSymbol as sling.model.SymbolNode
	func exportSymbol as sling.model.SymbolNode
}
class name sling.model.ExpressionDataTypeNode header extends sling.common.DataTypeNode public
{
	import sling.common
	import jk.lang
	ctor
	func getNodeTypeName override as string
	func createNew override as sling.common.NodeObject
	func copyTo(o as sling.common.NodeObject) override as bool
	func replaceChild(oldnode as sling.common.NodeObject, newnode as sling.common.NodeObject, doExport as bool) override as bool
	func acceptVisitor(visitor as sling.common.NodeVisitor) override as bool
	func destroy override
	func setExpression(v as sling.model.ExpressionNode, doExport as bool = false)
	func getExpression as sling.model.ExpressionNode
	func exportExpression as sling.model.ExpressionNode
}
class name sling.model.ModuloExpressionNode header extends sling.model.ArithmeticExpressionNode public
{
	import sling.common
	import jk.lang
	ctor
	func instance(left as sling.model.ExpressionNode, right as sling.model.ExpressionNode) static as sling.model.ModuloExpressionNode
	func getNodeTypeName override as string
	func createNew override as sling.common.NodeObject
	func copyTo(o as sling.common.NodeObject) override as bool
	func replaceChild(oldnode as sling.common.NodeObject, newnode as sling.common.NodeObject, doExport as bool) override as bool
	func acceptVisitor(visitor as sling.common.NodeVisitor) override as bool
	func destroy override
}
class name sling.model.AssignmentExpressionNode header extends sling.model.AssignmentExpressionBaseNode public
{
	import sling.common
	import jk.lang
	ctor
	func forNodes(left as sling.model.ExpressionNode, right as sling.model.ExpressionNode) static as sling.model.AssignmentExpressionNode
	func getNodeTypeName override as string
	func createNew override as sling.common.NodeObject
	func copyTo(o as sling.common.NodeObject) override as bool
	func replaceChild(oldnode as sling.common.NodeObject, newnode as sling.common.NodeObject, doExport as bool) override as bool
	func acceptVisitor(visitor as sling.common.NodeVisitor) override as bool
	func destroy override
	func setExpectedType(v as sling.common.DataTypeNode, doExport as bool = false)
	func getExpectedType as sling.common.DataTypeNode
	func exportExpectedType as sling.common.DataTypeNode
}
class name sling.model.DefaultValueExpressionNode header extends sling.model.ExpressionNode public
{
	import sling.common
	import jk.lang
	ctor
	func getNodeTypeName override as string
	func createNew override as sling.common.NodeObject
	func copyTo(o as sling.common.NodeObject) override as bool
	func replaceChild(oldnode as sling.common.NodeObject, newnode as sling.common.NodeObject, doExport as bool) override as bool
	func acceptVisitor(visitor as sling.common.NodeVisitor) override as bool
	func destroy override
}
class name sling.model.NamespaceNode header extends sling.common.NamedContainerNode implements sling.model.NodeWithModifiers public
{
	import sling.common
	import jk.lang
	ctor
	func forName(name as string) static as sling.model.NamespaceNode
	func getNodeTypeName override as string
	func createNew override as sling.common.NodeObject
	func copyTo(o as sling.common.NodeObject) override as bool
	func replaceChild(oldnode as sling.common.NodeObject, newnode as sling.common.NodeObject, doExport as bool) override as bool
	func acceptVisitor(visitor as sling.common.NodeVisitor) override as bool
	func destroy override
	func setModifiers(v as vector, doExport as bool = false)
	func getModifiers as vector
	func exportModifiers as vector
	func addToModifiers(v as sling.common.NodeObject)
	func clearModifiers
}
class name sling.model.BufferLiteralExpressionNode header extends sling.model.LiteralExpressionNode public
{
	import sling.common
	import jk.lang
	func forValue(value as buffer) static as sling.model.BufferLiteralExpressionNode
	ctor
	func getNodeTypeName override as string
	func createNew override as sling.common.NodeObject
	func copyTo(o as sling.common.NodeObject) override as bool
	func replaceChild(oldnode as sling.common.NodeObject, newnode as sling.common.NodeObject, doExport as bool) override as bool
	func acceptVisitor(visitor as sling.common.NodeVisitor) override as bool
	func destroy override
	func setType(v as sling.common.DataTypeNode, doExport as bool = false)
	func getType as sling.common.DataTypeNode
	func exportType as sling.common.DataTypeNode
	func setValue(v as buffer)
	func getValue as buffer
}
class name sling.model.PropertyGetFunctionDeclarationNode header extends sling.model.FunctionDeclarationNode public
{
	import sling.common
	import jk.lang
	ctor
	func getNodeTypeName override as string
	func createNew override as sling.common.NodeObject
	func copyTo(o as sling.common.NodeObject) override as bool
	func replaceChild(oldnode as sling.common.NodeObject, newnode as sling.common.NodeObject, doExport as bool) override as bool
	func acceptVisitor(visitor as sling.common.NodeVisitor) override as bool
	func destroy override
}
class name sling.model.ConditionalExpressionNode header extends sling.model.ExpressionNode public
{
	import sling.common
	import jk.lang
	ctor
	func instance(condition as sling.model.ExpressionNode, trueExpr as sling.model.ExpressionNode, falseExpr as sling.model.ExpressionNode) static as sling.model.ConditionalExpressionNode
	func getNodeTypeName override as string
	func createNew override as sling.common.NodeObject
	func copyTo(o as sling.common.NodeObject) override as bool
	func replaceChild(oldnode as sling.common.NodeObject, newnode as sling.common.NodeObject, doExport as bool) override as bool
	func acceptVisitor(visitor as sling.common.NodeVisitor) override as bool
	func destroy override
	func setCondition(v as sling.model.ExpressionNode, doExport as bool = false)
	func getCondition as sling.model.ExpressionNode
	func exportCondition as sling.model.ExpressionNode
	func setTrueExpr(v as sling.model.ExpressionNode, doExport as bool = false)
	func getTrueExpr as sling.model.ExpressionNode
	func exportTrueExpr as sling.model.ExpressionNode
	func setFalseExpr(v as sling.model.ExpressionNode, doExport as bool = false)
	func getFalseExpr as sling.model.ExpressionNode
	func exportFalseExpr as sling.model.ExpressionNode
}
class name sling.model.BaseClassAccessExpressionNode header extends sling.model.ExpressionNode public
{
	import sling.common
	import jk.lang
	ctor
	func getNodeTypeName override as string
	func createNew override as sling.common.NodeObject
	func copyTo(o as sling.common.NodeObject) override as bool
	func replaceChild(oldnode as sling.common.NodeObject, newnode as sling.common.NodeObject, doExport as bool) override as bool
	func acceptVisitor(visitor as sling.common.NodeVisitor) override as bool
	func destroy override
}
class name sling.model.PromiseLiteralExpressionNode header extends sling.model.LiteralExpressionNode public
{
	import sling.common
	import jk.lang
	ctor
	func getNodeTypeName override as string
	func createNew override as sling.common.NodeObject
	func copyTo(o as sling.common.NodeObject) override as bool
	func replaceChild(oldnode as sling.common.NodeObject, newnode as sling.common.NodeObject, doExport as bool) override as bool
	func acceptVisitor(visitor as sling.common.NodeVisitor) override as bool
	func destroy override
	func setType(v as sling.common.DataTypeNode, doExport as bool = false)
	func getType as sling.common.DataTypeNode
	func exportType as sling.common.DataTypeNode
	func setBody(v as sling.model.BlockNode, doExport as bool = false)
	func getBody as sling.model.BlockNode
	func exportBody as sling.model.BlockNode
}
class name sling.model.MapDataTypeNode header extends sling.common.DataTypeNode public
{
	import sling.common
	import jk.lang
	ctor
	func forTypes(key as sling.common.DataTypeNode, value as sling.common.DataTypeNode) static as sling.model.MapDataTypeNode
	func getNodeTypeName override as string
	func createNew override as sling.common.NodeObject
	func copyTo(o as sling.common.NodeObject) override as bool
	func replaceChild(oldnode as sling.common.NodeObject, newnode as sling.common.NodeObject, doExport as bool) override as bool
	func acceptVisitor(visitor as sling.common.NodeVisitor) override as bool
	func destroy override
	func setKeyType(v as sling.common.DataTypeNode, doExport as bool = false)
	func getKeyType as sling.common.DataTypeNode
	func exportKeyType as sling.common.DataTypeNode
	func setValueType(v as sling.common.DataTypeNode, doExport as bool = false)
	func getValueType as sling.common.DataTypeNode
	func exportValueType as sling.common.DataTypeNode
}
class name sling.model.MultiDimensionalArrayDataTypeNode header extends sling.model.DataTypeExtenderNode public
{
	import sling.common
	import jk.lang
	ctor
	func forDimensions(type as sling.common.DataTypeNode, dimensions as int) static as sling.model.MultiDimensionalArrayDataTypeNode
	func getNodeTypeName override as string
	func createNew override as sling.common.NodeObject
	func copyTo(o as sling.common.NodeObject) override as bool
	func replaceChild(oldnode as sling.common.NodeObject, newnode as sling.common.NodeObject, doExport as bool) override as bool
	func acceptVisitor(visitor as sling.common.NodeVisitor) override as bool
	func destroy override
	func setDimensions(v as int)
	func getDimensions as int
}
class name sling.model.ExpressionContainerNode header extends sling.common.NodeObject public
{
	import sling.common
	import jk.lang
	ctor
	func getNodeTypeName override as string
	func createNew override as sling.common.NodeObject
	func copyTo(o as sling.common.NodeObject) override as bool
	func replaceChild(oldnode as sling.common.NodeObject, newnode as sling.common.NodeObject, doExport as bool) override as bool
	func acceptVisitor(visitor as sling.common.NodeVisitor) override as bool
	func destroy override
	func setExpression(v as sling.model.ExpressionNode, doExport as bool = false)
	func getExpression as sling.model.ExpressionNode
	func exportExpression as sling.model.ExpressionNode
}
class name sling.model.ImportStaticMemberStatementNode header extends sling.model.ImportStatementNode public
{
	import sling.common
	import jk.lang
	ctor
	func getNodeTypeName override as string
	func createNew override as sling.common.NodeObject
	func copyTo(o as sling.common.NodeObject) override as bool
	func replaceChild(oldnode as sling.common.NodeObject, newnode as sling.common.NodeObject, doExport as bool) override as bool
	func acceptVisitor(visitor as sling.common.NodeVisitor) override as bool
	func destroy override
	func setMember(v as sling.model.SymbolNode, doExport as bool = false)
	func getMember as sling.model.SymbolNode
	func exportMember as sling.model.SymbolNode
	func setContainer(v as sling.model.SymbolNode, doExport as bool = false)
	func getContainer as sling.model.SymbolNode
	func exportContainer as sling.model.SymbolNode
	func setAllMembers(v as bool)
	func getAllMembers as bool
}
class name sling.model.CommonModifierNode header extends sling.common.NodeObject public
{
	import sling.common
	import jk.lang
	ctor
	func forType(type as string) static as sling.model.CommonModifierNode
	func getNodeTypeName override as string
	func createNew override as sling.common.NodeObject
	func copyTo(o as sling.common.NodeObject) override as bool
	func replaceChild(oldnode as sling.common.NodeObject, newnode as sling.common.NodeObject, doExport as bool) override as bool
	func acceptVisitor(visitor as sling.common.NodeVisitor) override as bool
	func destroy override
	func setType(v as string)
	func getType as string
}
class name sling.model.NullLiteralExpressionNode header extends sling.model.LiteralExpressionNode public
{
	import sling.common
	import jk.lang
	ctor
	func getNodeTypeName override as string
	func createNew override as sling.common.NodeObject
	func copyTo(o as sling.common.NodeObject) override as bool
	func replaceChild(oldnode as sling.common.NodeObject, newnode as sling.common.NodeObject, doExport as bool) override as bool
	func acceptVisitor(visitor as sling.common.NodeVisitor) override as bool
	func destroy override
}
class name sling.model.CurrentObjectExpressionNode header extends sling.model.ExpressionNode public
{
	import sling.common
	import jk.lang
	ctor
	func getNodeTypeName override as string
	func createNew override as sling.common.NodeObject
	func copyTo(o as sling.common.NodeObject) override as bool
	func replaceChild(oldnode as sling.common.NodeObject, newnode as sling.common.NodeObject, doExport as bool) override as bool
	func acceptVisitor(visitor as sling.common.NodeVisitor) override as bool
	func destroy override
}
class name sling.model.VectorDataTypeNode header extends sling.model.DataTypeExtenderNode public
{
	import sling.common
	import jk.lang
	ctor
	func forPrimaryType(type as sling.common.DataTypeNode) static as sling.model.VectorDataTypeNode
	func getNodeTypeName override as string
	func createNew override as sling.common.NodeObject
	func copyTo(o as sling.common.NodeObject) override as bool
	func replaceChild(oldnode as sling.common.NodeObject, newnode as sling.common.NodeObject, doExport as bool) override as bool
	func acceptVisitor(visitor as sling.common.NodeVisitor) override as bool
	func destroy override
}
class name sling.model.ArrayCreationExpressionNode header extends sling.model.ExpressionNode public
{
	import sling.common
	import jk.lang
	ctor
	func forPrimaryType(type as sling.common.DataTypeNode) static as sling.model.ArrayCreationExpressionNode
	func forLiteral(literal as sling.model.ArrayLiteralExpressionNode) static as sling.model.ArrayCreationExpressionNode
	func getDimensionCount as int
	func getPrimaryType as sling.common.DataTypeNode
	func getNodeTypeName override as string
	func createNew override as sling.common.NodeObject
	func copyTo(o as sling.common.NodeObject) override as bool
	func replaceChild(oldnode as sling.common.NodeObject, newnode as sling.common.NodeObject, doExport as bool) override as bool
	func acceptVisitor(visitor as sling.common.NodeVisitor) override as bool
	func destroy override
	func setArrayLiteral(v as sling.model.ArrayLiteralExpressionNode, doExport as bool = false)
	func getArrayLiteral as sling.model.ArrayLiteralExpressionNode
	func exportArrayLiteral as sling.model.ArrayLiteralExpressionNode
	func setPrimaryType(v as sling.common.DataTypeNode, doExport as bool = false)
	func exportPrimaryType as sling.common.DataTypeNode
	func setExpressionType(v as sling.common.DataTypeNode, doExport as bool = false)
	func getExpressionType as sling.common.DataTypeNode
	func exportExpressionType as sling.common.DataTypeNode
	func setDimensions(v as vector, doExport as bool = false)
	func getDimensions as vector
	func exportDimensions as vector
	func addToDimensions(v as sling.model.ExpressionNode)
	func clearDimensions
}
class name sling.model.ClassDeclarationInstantiationExpressionNode header extends sling.model.ExpressionNode public
{
	import sling.common
	import jk.lang
	ctor
	func forDeclaration(cdecl as sling.model.ClassDeclarationNode) static as sling.model.ClassDeclarationInstantiationExpressionNode
	func getNodeTypeName override as string
	func createNew override as sling.common.NodeObject
	func copyTo(o as sling.common.NodeObject) override as bool
	func replaceChild(oldnode as sling.common.NodeObject, newnode as sling.common.NodeObject, doExport as bool) override as bool
	func acceptVisitor(visitor as sling.common.NodeVisitor) override as bool
	func destroy override
	func setClassDeclaration(v as sling.model.ClassDeclarationNode, doExport as bool = false)
	func getClassDeclaration as sling.model.ClassDeclarationNode
	func exportClassDeclaration as sling.model.ClassDeclarationNode
	func setParameters(v as vector, doExport as bool = false)
	func getParameters as vector
	func exportParameters as vector
	func addToParameters(v as sling.model.ExpressionNode)
	func clearParameters
}
class name sling.model.GetExpressionTypeinfoExpressionNode header extends sling.model.GetTypeinfoExpressionNode public
{
	import sling.common
	import jk.lang
	func forExpression(xpr as sling.model.ExpressionNode) static as sling.model.GetExpressionTypeinfoExpressionNode
	ctor
	func getNodeTypeName override as string
	func createNew override as sling.common.NodeObject
	func copyTo(o as sling.common.NodeObject) override as bool
	func replaceChild(oldnode as sling.common.NodeObject, newnode as sling.common.NodeObject, doExport as bool) override as bool
	func acceptVisitor(visitor as sling.common.NodeVisitor) override as bool
	func destroy override
	func setExpression(v as sling.model.ExpressionNode, doExport as bool = false)
	func getExpression as sling.model.ExpressionNode
	func exportExpression as sling.model.ExpressionNode
}
class name sling.model.FloatDataTypeNode header extends sling.model.PrimitiveDataTypeNode public
{
	import sling.common
	import jk.lang
	ctor
	func getNodeTypeName override as string
	func createNew override as sling.common.NodeObject
	func copyTo(o as sling.common.NodeObject) override as bool
	func replaceChild(oldnode as sling.common.NodeObject, newnode as sling.common.NodeObject, doExport as bool) override as bool
	func acceptVisitor(visitor as sling.common.NodeVisitor) override as bool
	func destroy override
}
class name sling.model.GetTypeinfoExpressionNode header extends sling.model.ExpressionNode abstract public
{
	import sling.common
	import jk.lang
	ctor
	func getNodeTypeName override as string
	func copyTo(o as sling.common.NodeObject) override as bool
	func replaceChild(oldnode as sling.common.NodeObject, newnode as sling.common.NodeObject, doExport as bool) override as bool
	func acceptVisitor(visitor as sling.common.NodeVisitor) override as bool
	func destroy override
}
class name sling.model.ExponentAssignmentExpressionNode header extends sling.model.AssignmentExpressionBaseNode public
{
	import sling.common
	import jk.lang
	ctor
	func instance(left as sling.model.ExpressionNode, right as sling.model.ExpressionNode) static as sling.model.ExponentAssignmentExpressionNode
	func getNodeTypeName override as string
	func createNew override as sling.common.NodeObject
	func copyTo(o as sling.common.NodeObject) override as bool
	func replaceChild(oldnode as sling.common.NodeObject, newnode as sling.common.NodeObject, doExport as bool) override as bool
	func acceptVisitor(visitor as sling.common.NodeVisitor) override as bool
	func destroy override
}
class name sling.model.PropertyValueDeclarationNode header extends sling.model.NodeObjectWithModifiers public
{
	import sling.common
	import jk.lang
	ctor
	func forName(name as string, value as sling.model.ExpressionNode = null) static as sling.model.PropertyValueDeclarationNode
	func hasName(value as string) as bool
	func getValueString as string
	func getValueInteger as int
	func getValueDouble as double
	func getValueBuffer as buffer
	func getNodeTypeName override as string
	func createNew override as sling.common.NodeObject
	func copyTo(o as sling.common.NodeObject) override as bool
	func replaceChild(oldnode as sling.common.NodeObject, newnode as sling.common.NodeObject, doExport as bool) override as bool
	func acceptVisitor(visitor as sling.common.NodeVisitor) override as bool
	func destroy override
	func setIndex(v as sling.model.ExpressionNode, doExport as bool = false)
	func getIndex as sling.model.ExpressionNode
	func exportIndex as sling.model.ExpressionNode
	func setValue(v as sling.model.ExpressionNode, doExport as bool = false)
	func getValue as sling.model.ExpressionNode
	func exportValue as sling.model.ExpressionNode
	func setKey(v as string)
	func getKey as string
	func setComment(v as string)
	func getComment as string
	func setObjectFlag(v as bool)
	func getObjectFlag as bool
	func setKeyParams(v as vector, doExport as bool = false)
	func getKeyParams as vector
	func exportKeyParams as vector
	func addToKeyParams(v as sling.model.ExpressionNode)
	func clearKeyParams
	func setKeyDimensions(v as vector, doExport as bool = false)
	func getKeyDimensions as vector
	func exportKeyDimensions as vector
	func addToKeyDimensions(v as sling.model.ExpressionNode)
	func clearKeyDimensions
}
class name sling.model.MembershipCheckExpressionNode header extends sling.model.BinaryExpressionNode public
{
	import sling.common
	import jk.lang
	ctor
	func instance(left as sling.model.ExpressionNode, right as sling.model.ExpressionNode) static as sling.model.MembershipCheckExpressionNode
	func getNodeTypeName override as string
	func createNew override as sling.common.NodeObject
	func copyTo(o as sling.common.NodeObject) override as bool
	func replaceChild(oldnode as sling.common.NodeObject, newnode as sling.common.NodeObject, doExport as bool) override as bool
	func acceptVisitor(visitor as sling.common.NodeVisitor) override as bool
	func destroy override
}
class name sling.model.KeyValueVariableDeclarationNode header extends sling.common.NodeObject public
{
	import sling.common
	import jk.lang
	ctor
	func forVariables(key as sling.model.VariableDeclarationNode, value as sling.model.VariableDeclarationNode) static as sling.model.KeyValueVariableDeclarationNode
	func getNodeTypeName override as string
	func createNew override as sling.common.NodeObject
	func copyTo(o as sling.common.NodeObject) override as bool
	func replaceChild(oldnode as sling.common.NodeObject, newnode as sling.common.NodeObject, doExport as bool) override as bool
	func acceptVisitor(visitor as sling.common.NodeVisitor) override as bool
	func destroy override
	func setKey(v as sling.model.VariableDeclarationNode, doExport as bool = false)
	func getKey as sling.model.VariableDeclarationNode
	func exportKey as sling.model.VariableDeclarationNode
	func setValue(v as sling.model.VariableDeclarationNode, doExport as bool = false)
	func getValue as sling.model.VariableDeclarationNode
	func exportValue as sling.model.VariableDeclarationNode
}
class name sling.model.DoubleLiteralExpressionNode header extends sling.model.LiteralExpressionNode public
{
	import sling.common
	import jk.lang
	func forValue(value as double) static as sling.model.DoubleLiteralExpressionNode
	var FORMAT_DECIMAL const public static as int
	var FORMAT_HEXADECIMAL const public static as int
	ctor
	func getNodeTypeName override as string
	func createNew override as sling.common.NodeObject
	func copyTo(o as sling.common.NodeObject) override as bool
	func replaceChild(oldnode as sling.common.NodeObject, newnode as sling.common.NodeObject, doExport as bool) override as bool
	func acceptVisitor(visitor as sling.common.NodeVisitor) override as bool
	func destroy override
	func setValue(v as double)
	func getValue as double
	func setFormat(v as int)
	func getFormat as int
}
class name sling.model.ContinueStatementNode header extends sling.common.NodeObject public
{
	import sling.common
	import jk.lang
	ctor
	func getNodeTypeName override as string
	func createNew override as sling.common.NodeObject
	func copyTo(o as sling.common.NodeObject) override as bool
	func replaceChild(oldnode as sling.common.NodeObject, newnode as sling.common.NodeObject, doExport as bool) override as bool
	func acceptVisitor(visitor as sling.common.NodeVisitor) override as bool
	func destroy override
	func setLevel(v as int)
	func getLevel as int
}
class name sling.model.ErrorStatementNode header extends sling.common.NodeObject public
{
	import sling.common
	import jk.lang
	ctor
	func forText(text as string) static as sling.model.ErrorStatementNode
	func getNodeTypeName override as string
	func createNew override as sling.common.NodeObject
	func copyTo(o as sling.common.NodeObject) override as bool
	func replaceChild(oldnode as sling.common.NodeObject, newnode as sling.common.NodeObject, doExport as bool) override as bool
	func acceptVisitor(visitor as sling.common.NodeVisitor) override as bool
	func destroy override
	func setMessage(v as string)
	func getMessage as string
}
class name sling.model.MultiplicationExpressionNode header extends sling.model.ArithmeticExpressionNode public
{
	import sling.common
	import jk.lang
	ctor
	func instance(left as sling.model.ExpressionNode, right as sling.model.ExpressionNode) static as sling.model.MultiplicationExpressionNode
	func getNodeTypeName override as string
	func createNew override as sling.common.NodeObject
	func copyTo(o as sling.common.NodeObject) override as bool
	func replaceChild(oldnode as sling.common.NodeObject, newnode as sling.common.NodeObject, doExport as bool) override as bool
	func acceptVisitor(visitor as sling.common.NodeVisitor) override as bool
	func destroy override
}
class name sling.model.EventDeclarationNode header extends sling.model.NodeObjectWithModifiers implements sling.common.NamedNode public
{
	import sling.common
	import jk.lang
	ctor
	func getNodeName as string
	func renameNode(v as string)
	func addToBody(node as sling.common.NodeObject)
	func getNodeTypeName override as string
	func createNew override as sling.common.NodeObject
	func copyTo(o as sling.common.NodeObject) override as bool
	func replaceChild(oldnode as sling.common.NodeObject, newnode as sling.common.NodeObject, doExport as bool) override as bool
	func acceptVisitor(visitor as sling.common.NodeVisitor) override as bool
	func destroy override
	func setType(v as sling.common.DataTypeNode, doExport as bool = false)
	func getType as sling.common.DataTypeNode
	func exportType as sling.common.DataTypeNode
	func setBody(v as sling.model.BlockNode, doExport as bool = false)
	func getBody as sling.model.BlockNode
	func exportBody as sling.model.BlockNode
	func setName(v as string)
	func getName as string
	func setDescription(v as string)
	func getDescription as string
}
class name sling.model.PostIncrementExpressionNode header extends sling.model.UnaryExpressionNode public
{
	import sling.common
	import jk.lang
	ctor
	func forExpression(expression as sling.model.ExpressionNode) static as sling.model.PostIncrementExpressionNode
	func getNodeTypeName override as string
	func createNew override as sling.common.NodeObject
	func copyTo(o as sling.common.NodeObject) override as bool
	func replaceChild(oldnode as sling.common.NodeObject, newnode as sling.common.NodeObject, doExport as bool) override as bool
	func acceptVisitor(visitor as sling.common.NodeVisitor) override as bool
	func destroy override
}
class name sling.model.ImportPackageStatementNode header extends sling.model.ImportStatementNode public
{
	import sling.common
	import jk.lang
	ctor
	func getNodeTypeName override as string
	func createNew override as sling.common.NodeObject
	func copyTo(o as sling.common.NodeObject) override as bool
	func replaceChild(oldnode as sling.common.NodeObject, newnode as sling.common.NodeObject, doExport as bool) override as bool
	func acceptVisitor(visitor as sling.common.NodeVisitor) override as bool
	func destroy override
	func setPackage(v as sling.model.SymbolNode, doExport as bool = false)
	func getPackage as sling.model.SymbolNode
	func exportPackage as sling.model.SymbolNode
	func setDefaultExport(v as string)
	func getDefaultExport as string
}
class name sling.model.NamedParameterDeclarationNode header extends sling.model.ExpressionNode public
{
	import sling.common
	import jk.lang
	ctor
	func getNodeTypeName override as string
	func createNew override as sling.common.NodeObject
	func copyTo(o as sling.common.NodeObject) override as bool
	func replaceChild(oldnode as sling.common.NodeObject, newnode as sling.common.NodeObject, doExport as bool) override as bool
	func acceptVisitor(visitor as sling.common.NodeVisitor) override as bool
	func destroy override
	func setVariable(v as sling.model.VariableDeclarationNode, doExport as bool = false)
	func getVariable as sling.model.VariableDeclarationNode
	func exportVariable as sling.model.VariableDeclarationNode
	func setName(v as string)
	func getName as string
}
class name sling.model.WithStatementExpressionReferenceNode header extends sling.model.ExpressionNode public
{
	import sling.common
	import jk.lang
	ctor
	func getNodeTypeName override as string
	func createNew override as sling.common.NodeObject
	func copyTo(o as sling.common.NodeObject) override as bool
	func replaceChild(oldnode as sling.common.NodeObject, newnode as sling.common.NodeObject, doExport as bool) override as bool
	func acceptVisitor(visitor as sling.common.NodeVisitor) override as bool
	func destroy override
}
class name sling.model.MultipleDataTypeNode header extends sling.common.DataTypeNode public
{
	import sling.common
	import jk.lang
	ctor
	func getNodeTypeName override as string
	func createNew override as sling.common.NodeObject
	func copyTo(o as sling.common.NodeObject) override as bool
	func replaceChild(oldnode as sling.common.NodeObject, newnode as sling.common.NodeObject, doExport as bool) override as bool
	func acceptVisitor(visitor as sling.common.NodeVisitor) override as bool
	func destroy override
	func setTypes(v as vector, doExport as bool = false)
	func getTypes as vector
	func exportTypes as vector
	func addToTypes(v as sling.common.DataTypeNode)
	func clearTypes
}
class name sling.model.DynamicCastExpressionNode header extends sling.model.TypeCastExpressionNode public
{
	import sling.common
	import jk.lang
	ctor
	func instance(type as sling.common.DataTypeNode, expression as sling.model.ExpressionNode) static as sling.model.DynamicCastExpressionNode
	func getNodeTypeName override as string
	func createNew override as sling.common.NodeObject
	func copyTo(o as sling.common.NodeObject) override as bool
	func replaceChild(oldnode as sling.common.NodeObject, newnode as sling.common.NodeObject, doExport as bool) override as bool
	func acceptVisitor(visitor as sling.common.NodeVisitor) override as bool
	func destroy override
}
class name sling.model.NodeObjectWithModifiers header extends sling.common.NodeObject implements sling.model.NodeWithModifiers public
{
	import sling.common
	import jk.lang
	ctor
	func getNodeTypeName override as string
	func createNew override as sling.common.NodeObject
	func copyTo(o as sling.common.NodeObject) override as bool
	func replaceChild(oldnode as sling.common.NodeObject, newnode as sling.common.NodeObject, doExport as bool) override as bool
	func acceptVisitor(visitor as sling.common.NodeVisitor) override as bool
	func destroy override
	func setModifiers(v as vector, doExport as bool = false)
	func getModifiers as vector
	func exportModifiers as vector
	func addToModifiers(v as sling.common.NodeObject)
	func clearModifiers
}
class name sling.model.TreeDataTypeNode header extends sling.common.DataTypeNode public
{
	import sling.common
	import jk.lang
	ctor
	func getNodeTypeName override as string
	func createNew override as sling.common.NodeObject
	func copyTo(o as sling.common.NodeObject) override as bool
	func replaceChild(oldnode as sling.common.NodeObject, newnode as sling.common.NodeObject, doExport as bool) override as bool
	func acceptVisitor(visitor as sling.common.NodeVisitor) override as bool
	func destroy override
}
class name sling.model.SetLiteralExpressionNode header extends sling.model.LiteralExpressionNode public
{
	import sling.common
	import jk.lang
	ctor
	func getNodeTypeName override as string
	func createNew override as sling.common.NodeObject
	func copyTo(o as sling.common.NodeObject) override as bool
	func replaceChild(oldnode as sling.common.NodeObject, newnode as sling.common.NodeObject, doExport as bool) override as bool
	func acceptVisitor(visitor as sling.common.NodeVisitor) override as bool
	func destroy override
	func setValues(v as vector, doExport as bool = false)
	func getValues as vector
	func exportValues as vector
	func addToValues(v as sling.model.ExpressionNode)
	func clearValues
}
class name sling.model.AppendToVectorExpressionNode header extends sling.model.BinaryExpressionNode public
{
	import sling.common
	import jk.lang
	ctor
	func getNodeTypeName override as string
	func createNew override as sling.common.NodeObject
	func copyTo(o as sling.common.NodeObject) override as bool
	func replaceChild(oldnode as sling.common.NodeObject, newnode as sling.common.NodeObject, doExport as bool) override as bool
	func acceptVisitor(visitor as sling.common.NodeVisitor) override as bool
	func destroy override
}
class name sling.model.SafeUnwrapOptionalExpressionNode header extends sling.model.UnaryExpressionNode public
{
	import sling.common
	import jk.lang
	ctor
	func forExpression(expression as sling.model.ExpressionNode) static as sling.model.SafeUnwrapOptionalExpressionNode
	func getNodeTypeName override as string
	func createNew override as sling.common.NodeObject
	func copyTo(o as sling.common.NodeObject) override as bool
	func replaceChild(oldnode as sling.common.NodeObject, newnode as sling.common.NodeObject, doExport as bool) override as bool
	func acceptVisitor(visitor as sling.common.NodeVisitor) override as bool
	func destroy override
}
class name sling.model.MapLiteralExpressionNode header extends sling.model.LiteralExpressionNode public
{
	import sling.common
	import jk.lang
	ctor
	func forObjects static as sling.model.MapLiteralExpressionNode
	func forDynamics static as sling.model.MapLiteralExpressionNode
	func getNodeTypeName override as string
	func createNew override as sling.common.NodeObject
	func copyTo(o as sling.common.NodeObject) override as bool
	func replaceChild(oldnode as sling.common.NodeObject, newnode as sling.common.NodeObject, doExport as bool) override as bool
	func acceptVisitor(visitor as sling.common.NodeVisitor) override as bool
	func destroy override
	func setValues(v as vector, doExport as bool = false)
	func getValues as vector
	func exportValues as vector
	func addToValues(v as sling.common.NodeObject)
	func clearValues
}
class name sling.model.YieldValueExpressionNode header extends sling.model.UnaryExpressionNode public
{
	import sling.common
	import jk.lang
	ctor
	func getNodeTypeName override as string
	func createNew override as sling.common.NodeObject
	func copyTo(o as sling.common.NodeObject) override as bool
	func replaceChild(oldnode as sling.common.NodeObject, newnode as sling.common.NodeObject, doExport as bool) override as bool
	func acceptVisitor(visitor as sling.common.NodeVisitor) override as bool
	func destroy override
}
class name sling.model.TreeDeclarationNode header extends sling.common.NodeObject public
{
	import sling.common
	import jk.lang
	ctor
	func getNodeTypeName override as string
	func createNew override as sling.common.NodeObject
	func copyTo(o as sling.common.NodeObject) override as bool
	func replaceChild(oldnode as sling.common.NodeObject, newnode as sling.common.NodeObject, doExport as bool) override as bool
	func acceptVisitor(visitor as sling.common.NodeVisitor) override as bool
	func destroy override
	func setRoot(v as sling.model.TreeElementNode, doExport as bool = false)
	func getRoot as sling.model.TreeElementNode
	func exportRoot as sling.model.TreeElementNode
	func setName(v as string)
	func getName as string
}
class name sling.model.BitwiseNotExpressionNode header extends sling.model.UnaryExpressionNode public
{
	import sling.common
	import jk.lang
	ctor
	func forExpression(expression as sling.model.ExpressionNode) static as sling.model.BitwiseNotExpressionNode
	func getNodeTypeName override as string
	func createNew override as sling.common.NodeObject
	func copyTo(o as sling.common.NodeObject) override as bool
	func replaceChild(oldnode as sling.common.NodeObject, newnode as sling.common.NodeObject, doExport as bool) override as bool
	func acceptVisitor(visitor as sling.common.NodeVisitor) override as bool
	func destroy override
}
class name sling.model.NullCoalescingAssignmentExpressionNode header extends sling.model.AssignmentExpressionBaseNode public
{
	import sling.common
	import jk.lang
	ctor
	func forExpressions(left as sling.model.ExpressionNode, right as sling.model.ExpressionNode) static as sling.model.NullCoalescingAssignmentExpressionNode
	func getNodeTypeName override as string
	func createNew override as sling.common.NodeObject
	func copyTo(o as sling.common.NodeObject) override as bool
	func replaceChild(oldnode as sling.common.NodeObject, newnode as sling.common.NodeObject, doExport as bool) override as bool
	func acceptVisitor(visitor as sling.common.NodeVisitor) override as bool
	func destroy override
}
class name sling.model.SymbolNode header extends sling.model.NodeObjectWithModifiers public
{
	import sling.common
	import jk.lang
	ctor
	func forBinding(node as sling.common.NodeObject, typemap as sling.model.TypeMap) static as sling.model.SymbolNode
	func forName(name as string) static as sling.model.SymbolNode
	func forArrayOfNames(names as array) static as sling.model.SymbolNode
	func forVectorOfNames(names as vector) static as sling.model.SymbolNode
	func getBinding as sling.common.NodeObject
	func getBindingTypemap as sling.model.TypeMap
	func destroy override
	func setBinding(binding as sling.common.NodeObject, typemap as sling.model.TypeMap)
	func copyCustomTo(node as sling.common.NodeObject) override as bool
	func addObjectToComponents(obj as object)
	func addNameToComponents(name as string)
	func getNodeTypeName override as string
	func createNew override as sling.common.NodeObject
	func copyTo(o as sling.common.NodeObject) override as bool
	func replaceChild(oldnode as sling.common.NodeObject, newnode as sling.common.NodeObject, doExport as bool) override as bool
	func acceptVisitor(visitor as sling.common.NodeVisitor) override as bool
	func setMagical(v as bool)
	func getMagical as bool
	func setComponents(v as vector, doExport as bool = false)
	func getComponents as vector
	func exportComponents as vector
	func addToComponents(v as sling.model.SymbolNameComponentNode)
	func clearComponents
	func setTypeParameters(v as vector, doExport as bool = false)
	func getTypeParameters as vector
	func exportTypeParameters as vector
	func addToTypeParameters(v as sling.common.DataTypeNode)
	func clearTypeParameters
}
class name sling.model.ReturnStatementNode header extends sling.model.ExpressionContainerNode public
{
	import sling.common
	import jk.lang
	ctor
	func ifEquals(left as sling.model.ExpressionNode, right as sling.model.ExpressionNode, rval as sling.model.ExpressionNode) static as sling.common.NodeObject
	func forExpression(expression as sling.model.ExpressionNode) static as sling.model.ReturnStatementNode
	func getNodeTypeName override as string
	func createNew override as sling.common.NodeObject
	func copyTo(o as sling.common.NodeObject) override as bool
	func replaceChild(oldnode as sling.common.NodeObject, newnode as sling.common.NodeObject, doExport as bool) override as bool
	func acceptVisitor(visitor as sling.common.NodeVisitor) override as bool
	func destroy override
}
class name sling.model.LogicalAndExpressionNode header extends sling.model.LogicalExpressionNode public
{
	import sling.common
	import jk.lang
	ctor
	func instance(left as sling.model.ExpressionNode, right as sling.model.ExpressionNode) static as sling.model.LogicalAndExpressionNode
	func forExpressions(expressions as vector) static as sling.model.ExpressionNode
	func getNodeTypeName override as string
	func createNew override as sling.common.NodeObject
	func copyTo(o as sling.common.NodeObject) override as bool
	func replaceChild(oldnode as sling.common.NodeObject, newnode as sling.common.NodeObject, doExport as bool) override as bool
	func acceptVisitor(visitor as sling.common.NodeVisitor) override as bool
	func destroy override
}
class name sling.model.PromiseExpressionNode header extends sling.model.UnaryExpressionNode public
{
	import sling.common
	import jk.lang
	ctor
	func forExpression(expression as sling.model.ExpressionNode) static as sling.model.PromiseExpressionNode
	func getNodeTypeName override as string
	func createNew override as sling.common.NodeObject
	func copyTo(o as sling.common.NodeObject) override as bool
	func replaceChild(oldnode as sling.common.NodeObject, newnode as sling.common.NodeObject, doExport as bool) override as bool
	func acceptVisitor(visitor as sling.common.NodeVisitor) override as bool
	func destroy override
}
class name sling.model.BitwiseOrAssignmentExpressionNode header extends sling.model.AssignmentExpressionBaseNode public
{
	import sling.common
	import jk.lang
	ctor
	func instance(left as sling.model.ExpressionNode, right as sling.model.ExpressionNode) static as sling.model.BitwiseOrAssignmentExpressionNode
	func getNodeTypeName override as string
	func createNew override as sling.common.NodeObject
	func copyTo(o as sling.common.NodeObject) override as bool
	func replaceChild(oldnode as sling.common.NodeObject, newnode as sling.common.NodeObject, doExport as bool) override as bool
	func acceptVisitor(visitor as sling.common.NodeVisitor) override as bool
	func destroy override
}
class name sling.model.MainFunctionDeclarationNode header extends sling.model.FunctionDeclarationBaseNode public
{
	import sling.common
	import jk.lang
	ctor
	func setArgumentArrayName(varName as string)
	func getArgumentArrayName as string
	func getNodeTypeName override as string
	func createNew override as sling.common.NodeObject
	func copyTo(o as sling.common.NodeObject) override as bool
	func replaceChild(oldnode as sling.common.NodeObject, newnode as sling.common.NodeObject, doExport as bool) override as bool
	func acceptVisitor(visitor as sling.common.NodeVisitor) override as bool
	func destroy override
}
class name sling.model.PrimitiveDataTypeNode header extends sling.common.DataTypeNode public
{
	import sling.common
	import jk.lang
	ctor
	func getNodeTypeName override as string
	func createNew override as sling.common.NodeObject
	func copyTo(o as sling.common.NodeObject) override as bool
	func replaceChild(oldnode as sling.common.NodeObject, newnode as sling.common.NodeObject, doExport as bool) override as bool
	func acceptVisitor(visitor as sling.common.NodeVisitor) override as bool
	func destroy override
}
class name sling.model.BitwiseXorAssignmentExpressionNode header extends sling.model.AssignmentExpressionBaseNode public
{
	import sling.common
	import jk.lang
	ctor
	func instance(left as sling.model.ExpressionNode, right as sling.model.ExpressionNode) static as sling.model.BitwiseXorAssignmentExpressionNode
	func getNodeTypeName override as string
	func createNew override as sling.common.NodeObject
	func copyTo(o as sling.common.NodeObject) override as bool
	func replaceChild(oldnode as sling.common.NodeObject, newnode as sling.common.NodeObject, doExport as bool) override as bool
	func acceptVisitor(visitor as sling.common.NodeVisitor) override as bool
	func destroy override
}
class name sling.model.UnknownDataTypeNode header extends sling.common.DataTypeNode public
{
	import sling.common
	import jk.lang
	ctor
	func getNodeTypeName override as string
	func createNew override as sling.common.NodeObject
	func copyTo(o as sling.common.NodeObject) override as bool
	func replaceChild(oldnode as sling.common.NodeObject, newnode as sling.common.NodeObject, doExport as bool) override as bool
	func acceptVisitor(visitor as sling.common.NodeVisitor) override as bool
	func destroy override
}
class name sling.model.DependencyDeclarationNode header extends sling.common.NodeObject public
{
	import sling.common
	import jk.lang
	ctor
	func getNodeTypeName override as string
	func createNew override as sling.common.NodeObject
	func copyTo(o as sling.common.NodeObject) override as bool
	func replaceChild(oldnode as sling.common.NodeObject, newnode as sling.common.NodeObject, doExport as bool) override as bool
	func acceptVisitor(visitor as sling.common.NodeVisitor) override as bool
	func destroy override
	func setValue(v as string)
	func getValue as string
}
class name sling.model.FileSystemBinaryFileReferenceExpressionNode header extends sling.model.FileSystemReferenceExpressionNode public
{
	import sling.common
	import jk.lang
	ctor
	func getNodeTypeName override as string
	func createNew override as sling.common.NodeObject
	func copyTo(o as sling.common.NodeObject) override as bool
	func replaceChild(oldnode as sling.common.NodeObject, newnode as sling.common.NodeObject, doExport as bool) override as bool
	func acceptVisitor(visitor as sling.common.NodeVisitor) override as bool
	func destroy override
}
class name sling.model.OptionalDataTypeNode header extends sling.model.DataTypeExtenderNode public
{
	import sling.common
	import jk.lang
	ctor
	func forPrimaryType(type as sling.common.DataTypeNode) static as sling.model.OptionalDataTypeNode
	var EXPLICIT_UNWRAPPING const public static as int
	var IMPLICIT_UNWRAPPING const public static as int
	func getNodeTypeName override as string
	func createNew override as sling.common.NodeObject
	func copyTo(o as sling.common.NodeObject) override as bool
	func replaceChild(oldnode as sling.common.NodeObject, newnode as sling.common.NodeObject, doExport as bool) override as bool
	func acceptVisitor(visitor as sling.common.NodeVisitor) override as bool
	func destroy override
	func setUnwrappingMethod(v as int)
	func getUnwrappingMethod as int
}
class name sling.model.StyleSheetRulePropertyNode header extends sling.common.NodeObject public
{
	import sling.common
	import jk.lang
	ctor
	func instance(name as string, value as sling.model.ExpressionNode) static as sling.model.StyleSheetRulePropertyNode
	func getNodeTypeName override as string
	func createNew override as sling.common.NodeObject
	func copyTo(o as sling.common.NodeObject) override as bool
	func replaceChild(oldnode as sling.common.NodeObject, newnode as sling.common.NodeObject, doExport as bool) override as bool
	func acceptVisitor(visitor as sling.common.NodeVisitor) override as bool
	func destroy override
	func setValue(v as sling.model.ExpressionNode, doExport as bool = false)
	func getValue as sling.model.ExpressionNode
	func exportValue as sling.model.ExpressionNode
	func setName(v as string)
	func getName as string
}
class name sling.model.RangeDataTypeNode header extends sling.common.DataTypeNode public
{
	import sling.common
	import jk.lang
	ctor
	func getNodeTypeName override as string
	func createNew override as sling.common.NodeObject
	func copyTo(o as sling.common.NodeObject) override as bool
	func replaceChild(oldnode as sling.common.NodeObject, newnode as sling.common.NodeObject, doExport as bool) override as bool
	func acceptVisitor(visitor as sling.common.NodeVisitor) override as bool
	func destroy override
}
class name sling.model.StrictEqualsExpressionNode header extends sling.model.EqualityComparisonExpressionNode public
{
	import sling.common
	import jk.lang
	ctor
	func instance(left as sling.model.ExpressionNode, right as sling.model.ExpressionNode) static as sling.model.StrictEqualsExpressionNode
	func getNodeTypeName override as string
	func createNew override as sling.common.NodeObject
	func copyTo(o as sling.common.NodeObject) override as bool
	func replaceChild(oldnode as sling.common.NodeObject, newnode as sling.common.NodeObject, doExport as bool) override as bool
	func acceptVisitor(visitor as sling.common.NodeVisitor) override as bool
	func destroy override
}
class name sling.model.InitializerBlockDeclarationNode header extends sling.common.NodeObject public
{
	import sling.common
	import jk.lang
	ctor
	func forBlock(block as sling.model.BlockNode) static as sling.model.InitializerBlockDeclarationNode
	func getNodeTypeName override as string
	func createNew override as sling.common.NodeObject
	func copyTo(o as sling.common.NodeObject) override as bool
	func replaceChild(oldnode as sling.common.NodeObject, newnode as sling.common.NodeObject, doExport as bool) override as bool
	func acceptVisitor(visitor as sling.common.NodeVisitor) override as bool
	func destroy override
	func setBlock(v as sling.model.BlockNode, doExport as bool = false)
	func getBlock as sling.model.BlockNode
	func exportBlock as sling.model.BlockNode
}
